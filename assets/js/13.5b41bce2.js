(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{244:function(v,t,_){v.exports=_.p+"assets/img/imooc03.1d8aae9b.png"},245:function(v,t,_){v.exports=_.p+"assets/img/imooc04.3e3d13c9.png"},246:function(v,t,_){v.exports=_.p+"assets/img/imooc05.ee80bd62.png"},308:function(v,t,_){"use strict";_.r(t);var e=_(1),n=Object(e.a)({},(function(){var v=this,t=v.$createElement,e=v._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[e("h1",{attrs:{id:"《前端-javascript-高级面试》笔记"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#《前端-javascript-高级面试》笔记"}},[v._v("#")]),v._v(" 《前端 JavaScript 高级面试》笔记")]),v._v(" "),e("ul",[e("li",[v._v("CSS 盒模型\n"),e("ul",[e("li",[v._v("标准模型"),e("br"),v._v(" "),e("img",{staticStyle:{width:"500px"},attrs:{src:_(244),alt:"标准模型"}})]),v._v(" "),e("li",[v._v("IE 模型"),e("br"),v._v(" "),e("img",{staticStyle:{width:"500px"},attrs:{src:_(245),alt:"IE 模型"}})]),v._v(" "),e("li",[v._v("切换两种模型\n"),e("ul",[e("li",[e("code",[v._v("box-sizing: content-box")]),v._v(" 默认值。")]),v._v(" "),e("li",[e("code",[v._v("box-sizing: border-box")]),v._v("。")])])]),v._v(" "),e("li",[v._v("JS 获取盒模型的宽和高\n"),e("ul",[e("li",[e("code",[v._v("dom.style.width/height")]),v._v(" 只能取得内联样式（"),e("code",[v._v("style")]),v._v("）。")]),v._v(" "),e("li",[e("code",[v._v("dom.currentStyle.width/height")]),v._v(" 最终渲染的样式，只有 IE 支持。")]),v._v(" "),e("li",[e("code",[v._v("window.getComputedStyle(dom).width/height")]),v._v(" 最终渲染的样式，兼容性更好。")]),v._v(" "),e("li",[e("code",[v._v("dom.getBoundingClientRect().width/height")]),v._v(" 最终渲染的样式，还可以得到 dom 的绝对位置。")])])]),v._v(" "),e("li",[v._v("边距重叠几种情况\n"),e("ul",[e("li",[v._v("父子组件。")]),v._v(" "),e("li",[v._v("兄弟组件。")]),v._v(" "),e("li",[v._v("自组件（自身高度或者宽度为 0）。")])])]),v._v(" "),e("li",[v._v("BFC\n"),e("ul",[e("li",[v._v("块级格式化上下文")]),v._v(" "),e("li",[v._v("原理\n"),e("ul",[e("li",[v._v("BFC 元素垂直方向边距发生重叠。")]),v._v(" "),e("li",[v._v("BFC 区域不会与浮动 box 重叠 - 清楚浮动。")]),v._v(" "),e("li",[v._v("BFC 是一个独立的容器，外面、里面的元素互不影响。")]),v._v(" "),e("li",[v._v("计算 BFC 子元素即使是浮动元素也会计算。")])])]),v._v(" "),e("li",[v._v("创建 BFC\n"),e("ul",[e("li",[e("code",[v._v("overflow")]),v._v(" 不为 "),e("code",[v._v("visible")]),v._v("。")]),v._v(" "),e("li",[e("code",[v._v("float")]),v._v(" 不为 "),e("code",[v._v("none")]),v._v("。")]),v._v(" "),e("li",[e("code",[v._v("position")]),v._v(" 不为 "),e("code",[v._v("static")]),v._v(" 或者 "),e("code",[v._v("relative")]),v._v("。")]),v._v(" "),e("li",[e("code",[v._v("display")]),v._v(" 设置为为 table 相关时。")])])]),v._v(" "),e("li",[v._v("应用\n"),e("ul",[e("li",[v._v("清除浮动。")]),v._v(" "),e("li",[v._v("解决边距重叠。")])])])])])])]),v._v(" "),e("li",[v._v("DOM 事件\n"),e("ul",[e("li",[v._v("事件级别\n"),e("ul",[e("li",[v._v("DOM0 "),e("code",[v._v("dom.onclick=function(){}")])]),v._v(" "),e("li",[v._v("DOM2\n"),e("ul",[e("li",[e("code",[v._v("dom.addEventLisener('click',function(e){},false)")]),v._v(" "),e("code",[v._v("true")]),v._v("：在捕获阶段执行,"),e("code",[v._v("false")]),v._v("：在冒泡阶段执行。")]),v._v(" "),e("li",[e("code",[v._v("dom.attachEvent('onclick',function(e){})")]),v._v(" IE。")])])]),v._v(" "),e("li",[v._v("DOM3 增加了很多事件类型")])])]),v._v(" "),e("li",[v._v("事件模型\n"),e("ul",[e("li",[v._v("捕获")]),v._v(" "),e("li",[v._v("冒泡")])])]),v._v(" "),e("li",[v._v("事件流\n"),e("ul",[e("li",[v._v("点击后，从 window 到达目标元素的捕获阶段。")]),v._v(" "),e("li",[v._v("事件到达目标阶段。")]),v._v(" "),e("li",[v._v("事件从目标元素冒泡到 window 的阶段。")])])]),v._v(" "),e("li",[v._v("事件捕获的具体流程\n"),e("ul",[e("li",[v._v("window -> document -> html(document.documentElement) ->body -> DOM 树 -> 目标元素")]),v._v(" "),e("li",[v._v("冒泡流程相反")])])]),v._v(" "),e("li",[v._v("Event 对象\n"),e("ul",[e("li",[e("code",[v._v("event.preventDefault()")]),v._v("：阻止默认行为。")]),v._v(" "),e("li",[e("code",[v._v("event.stopPropagation()")]),v._v("：阻止冒泡。")]),v._v(" "),e("li",[e("code",[v._v("event.stopImmediatePropagation()")]),v._v("：阻止目标元素的其他事件的执行。")]),v._v(" "),e("li",[e("code",[v._v("event.target")]),v._v("：当前被点击的元素。")]),v._v(" "),e("li",[e("code",[v._v("event.currentTarget")]),v._v("：当前绑定事件的元素。")])])]),v._v(" "),e("li",[v._v("自定义事件")])])])]),v._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[v._v("        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("var")]),v._v(" eve "),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("new")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("Event")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[v._v("'myEvent'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[v._v("// CustomEvent 可以传递参数")]),v._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("var")]),v._v(" dom "),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" document"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),v._v("body"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n        dom"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[v._v("addEventLisener")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[v._v("'myEvent'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("function")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[v._v("e")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),v._v("\n            console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[v._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),v._v("e"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v("\n\n        dom"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[v._v("dispatchEvent")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),v._v("eve"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n")])])]),e("ul",[e("li",[v._v("HTTP 协议\n"),e("ul",[e("li",[v._v("HTTP 协议的主要特点\n"),e("ul",[e("li",[v._v("简单快捷")]),v._v(" "),e("li",[v._v("灵活")]),v._v(" "),e("li",[v._v("无连接")]),v._v(" "),e("li",[v._v("无状态（session 与 HTTP 无关）")])])]),v._v(" "),e("li",[v._v("POST 和 GET 区别\n"),e("ul",[e("li",[v._v("GET 在浏览器回退时是无害的,而 POST 会再次提交请求。")]),v._v(" "),e("li",[v._v("GET 产生的 URL 地址可以被收藏,而 POST 不可以。")]),v._v(" "),e("li",[v._v("GET 请求会被浏览器主动缓存,而 POST 不会,除非手动设置。")]),v._v(" "),e("li",[v._v("GET 请求只能进行 url 编码,而 POST 支持多种编码方式。")]),v._v(" "),e("li",[v._v("GET 请求参数会被完整保留在浏览器历史记录里,而 POST 中的参数不会被保留。")]),v._v(" "),e("li",[v._v("GET 请求在 URL 中传送的参数是有长度限制的,而 POST 没有限制。")]),v._v(" "),e("li",[v._v("对参数的数据类型,GET 只接受 ASCII 字符,而 POST 没有限制。")]),v._v(" "),e("li",[v._v("GET 比 POST 更不安全,因为参数直接暴露在 URL 上,所以不能用来传递敏感信息。")]),v._v(" "),e("li",[v._v("GET 参数通过 URL 传递,POST 放在 Request body 中。")])])])])]),v._v(" "),e("li",[v._v("前后端如何通信\n"),e("ul",[e("li",[v._v("Ajax 同源")]),v._v(" "),e("li",[v._v("WebSocket 非同源")]),v._v(" "),e("li",[v._v("CORS 同时支持同源和非同源的标准 - fetch")])])]),v._v(" "),e("li",[v._v("跨域通讯几种方式\n"),e("ul",[e("li",[v._v("JSONP\n"),e("ul",[e("li",[v._v("利用 "),e("code",[v._v("<script>")]),v._v(" 标签允许跨域请求实现的。")])])]),v._v(" "),e("li",[v._v("通过 Hash\n"),e("ul",[e("li",[v._v("当前页面 A 通过 iframe 或 frame 嵌入跨域的页面 B，B 中通过 "),e("code",[v._v("window.onhashchange")]),v._v("来处理。")])])]),v._v(" "),e("li",[v._v("postMessage H5中新增\n"),e("ul",[e("li",[v._v("窗口 A 向跨域的窗口 B 发送信息："),e("code",[v._v("Bwindow.postMessage(data,url)")]),v._v("，在 B 窗口中监听 "),e("code",[v._v("window.addEventListener('message',function(e){})")]),v._v("。")])])]),v._v(" "),e("li",[v._v("Webscoket\n"),e("ul",[e("li",[e("code",[v._v("new WebSocket('ws://')")]),v._v(" send onopen onmessage onclose。")])])]),v._v(" "),e("li",[v._v("CORS\n"),e("ul",[e("li",[v._v("fetch Promise 直接配置就可以支持跨域。")])])])])]),v._v(" "),e("li",[v._v("算法\n"),e("ul",[e("li",[v._v("排序\n"),e("ul",[e("li",[e("a",{attrs:{href:"https://segmentfault.com/a/1190000009426421",target:"_blank",rel:"noopener noreferrer"}},[v._v("快速排序"),e("OutboundLink")],1)]),v._v(" "),e("li",[e("a",{attrs:{href:"https://segmentfault.com/a/1190000009366805",target:"_blank",rel:"noopener noreferrer"}},[v._v("选择排序"),e("OutboundLink")],1)]),v._v(" "),e("li",[e("a",{attrs:{href:"https://segmentfault.com/a/1190000009461832",target:"_blank",rel:"noopener noreferrer"}},[v._v("希尔排序"),e("OutboundLink")],1)])])]),v._v(" "),e("li",[e("a",{attrs:{href:"https://juejin.im/entry/58759e79128fe1006b48cdfd",target:"_blank",rel:"noopener noreferrer"}},[v._v("堆栈、队列、链表"),e("OutboundLink")],1)]),v._v(" "),e("li",[e("a",{attrs:{href:"https://segmentfault.com/a/1190000009857470",target:"_blank",rel:"noopener noreferrer"}},[v._v("递归"),e("OutboundLink")],1)]),v._v(" "),e("li",[v._v("波兰式和逆波兰式\n"),e("ul",[e("li",[e("a",{attrs:{href:"http://www.cnblogs.com/chenying99/p/3675876.html",target:"_blank",rel:"noopener noreferrer"}},[v._v("原理"),e("OutboundLink")],1)]),v._v(" "),e("li",[e("a",{attrs:{href:"https://github.com/Tairraos/rpn.js/blob/master/rpn.js",target:"_blank",rel:"noopener noreferrer"}},[v._v("源码"),e("OutboundLink")],1)])])])])]),v._v(" "),e("li",[v._v("渲染机制\n"),e("ul",[e("li",[v._v("DOCTYPE\n"),e("ul",[e("li",[v._v("DOCTYPE 是用来声明文档类型和 DTD(文档类型定义，浏览器用它来判断文档类型) 规范的，用于文档合法性检查。")]),v._v(" "),e("li",[v._v("常用\n"),e("ul",[e("li",[v._v("HTML5："),e("code",[v._v("<!DOCTYPE html>")])]),v._v(" "),e("li",[v._v("HTML4：有两种，严格模式（不包含展示性和弃用的元素）和传统模式（全部包含）。")])])])])]),v._v(" "),e("li",[v._v("浏览器渲染过程\n"),e("ul",[e("li",[e("img",{staticStyle:{width:"500px"},attrs:{src:_(246),alt:"浏览器渲染过程"}})])])]),v._v(" "),e("li",[v._v("Reflow 重排\n"),e("ul",[e("li",[v._v("DOM 结构中的各个元素都有自己的盒子(模型),这些都需要浏览器根据各种样式来计算并根据计算结果将元素放到它该出现的位置,这个过程称之为 Reflow。")]),v._v(" "),e("li",[v._v("触发 Reflow\n"),e("ul",[e("li",[v._v("当你增加、删除、修改 DOM 节点时,会导致 Reflow 或 Repaint。")]),v._v(" "),e("li",[v._v("当你移动 DOM 的位置,或是搞个动画的时候。")]),v._v(" "),e("li",[v._v("当你修改 CSS 样式的时候。")]),v._v(" "),e("li",[v._v("当你 Resize 窗口的时候(移动端没有这个问题),或是滚动的时候。")]),v._v(" "),e("li",[v._v("当你修改网页的默认字体时。")])])])])]),v._v(" "),e("li",[v._v("Repaint 重绘\n"),e("ul",[e("li",[v._v("当各种盒子的位置、大小以及其他属性,例如颜色、字体大小等都确定下来后,浏览器于是便把这些元素都按照各自的特性绘制了一遍,于是页面的内容出现了,这个过程称之为 Repaint。")]),v._v(" "),e("li",[v._v("触发 Repaint\n"),e("ul",[e("li",[v._v("DOM 改动")]),v._v(" "),e("li",[v._v("CSS 改动")])])])])])])]),v._v(" "),e("li",[v._v("运行机制\n"),e("ul",[e("li",[v._v("同步任务、异步任务\n"),e("ul",[e("li",[v._v("异步任务\n"),e("ul",[e("li",[e("code",[v._v("setTimeout")]),v._v("、"),e("code",[v._v("setInterval")])]),v._v(" "),e("li",[v._v("DOM 事件")]),v._v(" "),e("li",[e("code",[v._v("Promise")])])])])])]),v._v(" "),e("li",[v._v("同步队列、异步队列")])])]),v._v(" "),e("li",[v._v("错误监控\n"),e("ul",[e("li",[v._v("前端错误分类\n"),e("ul",[e("li",[v._v("即时运行错误：代码错误\n"),e("ul",[e("li",[v._v("捕获方式：\n"),e("ul",[e("li",[e("code",[v._v("try..catch")])]),v._v(" "),e("li",[e("code",[v._v("window.onerror")])])])])])]),v._v(" "),e("li",[v._v("资源加载错误\n"),e("ul",[e("li",[v._v("捕获方式：\n"),e("ul",[e("li",[e("code",[v._v("object.onerror")])]),v._v(" "),e("li",[e("code",[v._v("performance.getEntries()")]),v._v(" 成功加载资源的集合")]),v._v(" "),e("li",[v._v("Error 事件捕获，"),e("code",[v._v("window.addEventListener('error',function(){},true)")])])])])])])])]),v._v(" "),e("li",[v._v("上报错误基本原理\n"),e("ul",[e("li",[v._v("利用 Ajax 上报。")]),v._v(" "),e("li",[v._v("利用 Image 对象上报。 "),e("code",[v._v("(new Image()).src = 'http://baidu.com/test?123';")])])])])])]),v._v(" "),e("li",[v._v("创建对象几种方式\n"),e("ul",[e("li",[e("code",[v._v("var obj = {x:1}")])]),v._v(" "),e("li",[e("code",[v._v("var obj = new Object({x:1})")])]),v._v(" "),e("li",[e("code",[v._v("function Test(){...} var obj = new Test()")])]),v._v(" "),e("li",[e("code",[v._v("var obj = Object.create({x:1})")])]),v._v(" "),e("li",[e("code",[v._v("var obj = Object.assign({x:1})")])])])]),v._v(" "),e("li",[v._v("创建对象的多种方法总结\n"),e("ul",[e("li",[v._v("工厂模式\n"),e("ul",[e("li",[v._v("缺点：对象无法识别。")])])]),v._v(" "),e("li",[v._v("构造函数\n"),e("ul",[e("li",[v._v("缺点：方法属性会在每个实例中重新创建一个，浪费资源。")])])]),v._v(" "),e("li",[v._v("原型模式\n"),e("ul",[e("li",[v._v("缺点：引用类型的属性被所有实例共享。")])])]),v._v(" "),e("li",[v._v("组合继承（最常见）\n"),e("ul",[e("li",[v._v("构造函数设置属性")]),v._v(" "),e("li",[v._v("原型链设置方法")])])]),v._v(" "),e("li",[v._v("class（最推荐）")])])]),v._v(" "),e("li",[v._v("继承的多种方法总结\n"),e("ul",[e("li",[v._v("借用构造函数继承\n"),e("ul",[e("li",[v._v("缺点：方法属性会在每个实例中重新创建一个，浪费资源。")])])]),v._v(" "),e("li",[v._v("原型链继承\n"),e("ul",[e("li",[v._v("缺点：引用类型的属性被所有实例共享。")])])]),v._v(" "),e("li",[v._v("组合继承（最常见）\n"),e("ul",[e("li",[v._v("构造函数继承属性")]),v._v(" "),e("li",[v._v("原型链继承方法")])])]),v._v(" "),e("li",[v._v("extends（最推荐）")])])])])])}),[],!1,null,null,null);t.default=n.exports}}]);