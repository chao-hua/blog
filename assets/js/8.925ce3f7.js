(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{250:function(_,v,e){_.exports=e.p+"assets/img/others04.7fbcdc5c.png"},251:function(_,v,e){_.exports=e.p+"assets/img/others01.c4e78c9e.png"},252:function(_,v,e){_.exports=e.p+"assets/img/others02.52568953.png"},253:function(_,v,e){_.exports=e.p+"assets/img/others03.ae2a3754.png"},331:function(_,v,e){"use strict";e.r(v);var l=e(1),i=Object(l.a)({},(function(){var _=this,v=_.$createElement,l=_._self._c||v;return l("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[l("h1",{attrs:{id:"面试知识点梳理"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#面试知识点梳理"}},[_._v("#")]),_._v(" 面试知识点梳理")]),_._v(" "),l("p"),l("div",{staticClass:"table-of-contents"},[l("ul",[l("li",[l("a",{attrs:{href:"#_1-html"}},[_._v("1.HTML")]),l("ul",[l("li",[l("a",{attrs:{href:"#_1-1-html-元素分类"}},[_._v("1.1 HTML 元素分类")])]),l("li",[l("a",{attrs:{href:"#_1-2-四大-web-组件标准"}},[_._v("1.2 四大 Web 组件标准")])])])]),l("li",[l("a",{attrs:{href:"#_2-css"}},[_._v("2.CSS")]),l("ul",[l("li",[l("a",{attrs:{href:"#_2-1-bfc"}},[_._v("2.1 BFC")])]),l("li",[l("a",{attrs:{href:"#_2-2-css-的动画类型"}},[_._v("2.2 CSS 的动画类型")])]),l("li",[l("a",{attrs:{href:"#_2-3-响应式布局"}},[_._v("2.3 响应式布局")])]),l("li",[l("a",{attrs:{href:"#_2-4-移动端适配"}},[_._v("2.4 移动端适配")])]),l("li",[l("a",{attrs:{href:"#_2-5-css-模块化"}},[_._v("2.5 CSS 模块化")])]),l("li",[l("a",{attrs:{href:"#_2-6-三大框架中的-css"}},[_._v("2.6 三大框架中的 CSS")])])])]),l("li",[l("a",{attrs:{href:"#_3-javascript"}},[_._v("3.JavaScript")]),l("ul",[l("li",[l("a",{attrs:{href:"#_3-1-原型、-原型链"}},[_._v("3.1 原型、 原型链")])]),l("li",[l("a",{attrs:{href:"#_3-2-创建对象的多种方法总结"}},[_._v("3.2 创建对象的多种方法总结")])]),l("li",[l("a",{attrs:{href:"#_3-3-继承的多种方法总结"}},[_._v("3.3 继承的多种方法总结")])]),l("li",[l("a",{attrs:{href:"#_3-4-new-一个对象的过程"}},[_._v("3.4 new 一个对象的过程")])]),l("li",[l("a",{attrs:{href:"#_3-5-this"}},[_._v("3.5 this")])]),l("li",[l("a",{attrs:{href:"#_3-6-作用域链"}},[_._v("3.6 作用域链")])]),l("li",[l("a",{attrs:{href:"#_3-7-闭包"}},[_._v("3.7 闭包")])]),l("li",[l("a",{attrs:{href:"#_3-8-事件"}},[_._v("3.8 事件")])]),l("li",[l("a",{attrs:{href:"#_3-9-防抖、节流"}},[_._v("3.9 防抖、节流")])]),l("li",[l("a",{attrs:{href:"#_3-10-async"}},[_._v("3.10 async")])]),l("li",[l("a",{attrs:{href:"#_3-11-js-模块化"}},[_._v("3.11 JS 模块化")])])])]),l("li",[l("a",{attrs:{href:"#_4-vue"}},[_._v("4.Vue")]),l("ul",[l("li",[l("a",{attrs:{href:"#_4-1-vue-2-原理"}},[_._v("4.1 Vue 2.+ 原理")])]),l("li",[l("a",{attrs:{href:"#_4-2-vue-实例初始化"}},[_._v("4.2 Vue 实例初始化")])]),l("li",[l("a",{attrs:{href:"#_4-3-vue-组件间通信几种方式"}},[_._v("4.3 Vue 组件间通信几种方式")])]),l("li",[l("a",{attrs:{href:"#_4-4-vdom"}},[_._v("4.4 vDOM")])]),l("li",[l("a",{attrs:{href:"#_4-5-vue-diff-算法"}},[_._v("4.5 Vue Diff 算法")])]),l("li",[l("a",{attrs:{href:"#_4-6-vue-router-守卫"}},[_._v("4.6 Vue Router 守卫")])])])]),l("li",[l("a",{attrs:{href:"#_5-前端工程化"}},[_._v("5.前端工程化")]),l("ul",[l("li",[l("a",{attrs:{href:"#_5-1-css-工程化"}},[_._v("5.1 CSS 工程化")])]),l("li",[l("a",{attrs:{href:"#_5-2-webpack-与-grunt-gulp"}},[_._v("5.2 webpack 与 grunt/gulp")])]),l("li",[l("a",{attrs:{href:"#_5-3-什么是长缓存，在-webpack-中如何做到长缓存优化"}},[_._v("5.3 什么是长缓存，在 webpack 中如何做到长缓存优化")])]),l("li",[l("a",{attrs:{href:"#_5-4-webpack3-与-webpack4"}},[_._v("5.4 webpack3 与 webpack4")])]),l("li",[l("a",{attrs:{href:"#_5-5-webpack-中的几个概念"}},[_._v("5.5 webpack 中的几个概念")])]),l("li",[l("a",{attrs:{href:"#_5-6-webpack-特色功能"}},[_._v("5.6 webpack 特色功能")])]),l("li",[l("a",{attrs:{href:"#_5-7-优化-webpack-打包速度"}},[_._v("5.7 优化 webpack 打包速度")])])])]),l("li",[l("a",{attrs:{href:"#_6-算法"}},[_._v("6.算法")]),l("ul",[l("li",[l("a",{attrs:{href:"#_6-1-常见的几种排序算法"}},[_._v("6.1 常见的几种排序算法")])]),l("li",[l("a",{attrs:{href:"#_6-2-时间复杂度、空间复杂度"}},[_._v("6.2 时间复杂度、空间复杂度")])]),l("li",[l("a",{attrs:{href:"#_6-3-动态规划"}},[_._v("6.3 动态规划")])])])]),l("li",[l("a",{attrs:{href:"#_7-others"}},[_._v("7.Others")]),l("ul",[l("li",[l("a",{attrs:{href:"#_7-1-测试"}},[_._v("7.1 测试")])]),l("li",[l("a",{attrs:{href:"#_7-2-跨域"}},[_._v("7.2 跨域")])]),l("li",[l("a",{attrs:{href:"#_7-3-页面加载"}},[_._v("7.3 页面加载")])]),l("li",[l("a",{attrs:{href:"#_7-4-渲染机制"}},[_._v("7.4 渲染机制")])]),l("li",[l("a",{attrs:{href:"#_7-5-性能优化"}},[_._v("7.5 性能优化")])]),l("li",[l("a",{attrs:{href:"#_7-6-安全性"}},[_._v("7.6 安全性")])]),l("li",[l("a",{attrs:{href:"#_7-7-错误监控、性能采集、用户信息收集"}},[_._v("7.7 错误监控、性能采集、用户信息收集")])]),l("li",[l("a",{attrs:{href:"#_7-8-项目设计"}},[_._v("7.8 项目设计")])]),l("li",[l("a",{attrs:{href:"#_7-9-event-loop"}},[_._v("7.9 Event Loop")])]),l("li",[l("a",{attrs:{href:"#_7-10-oauth"}},[_._v("7.10 OAuth")])]),l("li",[l("a",{attrs:{href:"#_7-11-htpp2"}},[_._v("7.11 HTPP2")])]),l("li",[l("a",{attrs:{href:"#_7-12-seo-优化"}},[_._v("7.12 SEO 优化")])]),l("li",[l("a",{attrs:{href:"#_7-13-mvc-mvp-mvvm"}},[_._v("7.13 MVC MVP MVVM")])]),l("li",[l("a",{attrs:{href:"#_7-14-flutter、rn、uni-app-weex"}},[_._v("7.14 flutter、rn、uni-app(weex)")])]),l("li",[l("a",{attrs:{href:"#_7-15-saas"}},[_._v("7.15 SaaS")])])])])])]),l("p"),_._v(" "),l("h2",{attrs:{id:"_1-html"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_1-html"}},[_._v("#")]),_._v(" 1.HTML")]),_._v(" "),l("h3",{attrs:{id:"_1-1-html-元素分类"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-html-元素分类"}},[_._v("#")]),_._v(" 1.1 HTML 元素分类")]),_._v(" "),l("ul",[l("li",[_._v("HTML4 中，元素根据 CSS 含义来划分为\n"),l("ul",[l("li",[_._v("inline(内联元素、行内元素)")]),_._v(" "),l("li",[_._v("block(块级元素)")]),_._v(" "),l("li",[_._v("但是可以通过 "),l("code",[_._v("display")]),_._v(" 来改变样式，后来又出现了 "),l("code",[_._v("inline-block")]),_._v("，因此这种划分是有些混乱的")])])]),_._v(" "),l("li",[_._v("HTML5 中，引入了全新的划分方式："),l("a",{attrs:{href:"https://html.spec.whatwg.org/multipage/dom.html#content-models",target:"_blank",rel:"noopener noreferrer"}},[_._v("内容模型(Content Model)"),l("OutboundLink")],1),_._v("，分为 7 类：\n"),l("ul",[l("li",[_._v("Metadata：定义文档元数据信息的元素。"),l("code",[_._v("base, link, meta, noscript, script, style, template, title")]),_._v("。")]),_._v(" "),l("li",[_._v("Flow：所有可以放在 "),l("code",[_._v("body")]),_._v(" 标签内。构成文档内容的元素均属于 Flow 元素。")]),_._v(" "),l("li",[_._v("Sectioning：页面结构的元素。"),l("code",[_._v("article, aside, nav, section")]),_._v("。")]),_._v(" "),l("li",[_._v("Heading：标题元素。"),l("code",[_._v("h1, h2, h3, h4, h5, h6")]),_._v("。")]),_._v(" "),l("li",[_._v("Phrasing：所有可以放在 "),l("code",[_._v("p")]),_._v(" 标签内，构成段落内容的元素。Phrasing 元素内部一般只能包含别的 Phrasing 元素。")]),_._v(" "),l("li",[_._v("Embedded：嵌入外部资源的元素。"),l("code",[_._v("audio, video, img, canvas, svg, iframe, embed, object, math")]),_._v("。")]),_._v(" "),l("li",[_._v("Interactive：与用户交互有关的元素。"),l("code",[_._v("a, button, input, textarea, select 等")]),_._v("。")])])]),_._v(" "),l("li",[_._v("HTML 元素嵌套关系\n"),l("ul",[l("li",[_._v("块级元素可以包含行内元素")]),_._v(" "),l("li",[_._v("块级元素不一定能包含块级元素\n"),l("ul",[l("li",[_._v("e.g. "),l("code",[_._v("p")]),_._v(" 元素不能包含 "),l("code",[_._v("div")]),_._v(" 元素")])])]),_._v(" "),l("li",[_._v("行内元素"),l("strong",[_._v("一般")]),_._v("不能包含块级元素\n"),l("ul",[l("li",[_._v("e.g. "),l("code",[_._v("a")]),_._v(" 元素有时可以包含 "),l("code",[_._v("div")]),_._v(" 元素，参考 1.1 注。")])])]),_._v(" "),l("li",[_._v("嵌套关系不是简单的用快级、行内来确定，需要使用 HTML5 的内容模型(Content Model)来确定元素嵌套的合法性")])])])]),_._v(" "),l("h3",{attrs:{id:"_1-2-四大-web-组件标准"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-四大-web-组件标准"}},[_._v("#")]),_._v(" 1.2 四大 Web 组件标准")]),_._v(" "),l("ul",[l("li",[_._v("HTML Template")]),_._v(" "),l("li",[_._v("Shadow DOM\n"),l("ul",[l("li",[_._v("也是 DOM 的一种，是一种特殊的子树，它能创建一个相对独立（可以从父节点继承属性）的空间。")]),_._v(" "),l("li",[_._v("利用这点就可以创建原生的组件。")]),_._v(" "),l("li",[_._v("浏览器中已有通过 Shadow DOM 实现的组件："),l("code",[_._v("<input>")]),_._v("、"),l("code",[_._v("<select>")]),_._v("、"),l("code",[_._v("<video>")]),_._v(" 等。")]),_._v(" "),l("li",[_._v("Shadow Root 是 Shadow DOM 的跟节点，可以在普通 DOM 上使用 "),l("code",[_._v("attachShadow(mode:'open')")]),_._v("  来创建一个 Shadow Root。")])])]),_._v(" "),l("li",[_._v("Custom Elements")]),_._v(" "),l("li",[_._v("HTML Imports")]),_._v(" "),l("li",[_._v("利用前 3 点实现的组件封装是就是 Web Components\n"),l("ul",[l("li",[_._v("Atag 淘宝前端团队")]),_._v(" "),l("li",[_._v("Omit 腾讯前端团队")])])])]),_._v(" "),l("h2",{attrs:{id:"_2-css"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_2-css"}},[_._v("#")]),_._v(" 2.CSS")]),_._v(" "),l("h3",{attrs:{id:"_2-1-bfc"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-bfc"}},[_._v("#")]),_._v(" 2.1 BFC")]),_._v(" "),l("ul",[l("li",[_._v("块级格式化上下文")]),_._v(" "),l("li",[_._v("原理\n"),l("ul",[l("li",[_._v("BFC 元素垂直方向边距发生重叠。")]),_._v(" "),l("li",[_._v("BFC 区域不会与浮动 box 重叠 - 清楚浮动。")]),_._v(" "),l("li",[_._v("BFC 是一个独立的容器，外面、里面的元素互不影响。")]),_._v(" "),l("li",[_._v("计算 BFC 子元素即使是浮动元素也会计算。")])])]),_._v(" "),l("li",[_._v("创建 BFC\n"),l("ul",[l("li",[l("code",[_._v("overflow")]),_._v(" 不为 "),l("code",[_._v("visible")]),_._v("。")]),_._v(" "),l("li",[l("code",[_._v("float")]),_._v(" 不为 "),l("code",[_._v("none")]),_._v("。")]),_._v(" "),l("li",[l("code",[_._v("position")]),_._v(" 不为 "),l("code",[_._v("static")]),_._v(" 或者 "),l("code",[_._v("relative")]),_._v("。")]),_._v(" "),l("li",[l("code",[_._v("display")]),_._v(" 设置为为 table 相关时。")])])]),_._v(" "),l("li",[_._v("应用\n"),l("ul",[l("li",[_._v("清除浮动。")]),_._v(" "),l("li",[_._v("解决边距重叠。")])])])]),_._v(" "),l("h3",{attrs:{id:"_2-2-css-的动画类型"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-css-的动画类型"}},[_._v("#")]),_._v(" 2.2 CSS 的动画类型")]),_._v(" "),l("ul",[l("li",[l("code",[_._v("transition")]),_._v(" 补间动画")]),_._v(" "),l("li",[l("code",[_._v("keyframe")]),_._v(" 关键帧动画")]),_._v(" "),l("li",[_._v("逐帧动画\n"),l("ul",[l("li",[_._v("关键帧动画的特例")]),_._v(" "),l("li",[_._v("适用于无法补间计算的动画 - 图片组成的动画，但仅适用于动画较小、时长较短时使用，不然会占用大量资源，性能差")]),_._v(" "),l("li",[_._v("使用 "),l("code",[_._v("animation-timing-function: steps(1);")]),_._v(" 指定过度是只有一帧即不计算补间")])])])]),_._v(" "),l("h3",{attrs:{id:"_2-3-响应式布局"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-响应式布局"}},[_._v("#")]),_._v(" 2.3 响应式布局")]),_._v(" "),l("ul",[l("li",[_._v("在不同设备上正常使用")]),_._v(" "),l("li",[_._v("一般主要处理屏幕大小问题（还有其他触摸、外设等问题）")]),_._v(" "),l("li",[_._v("主要方法\n"),l("ul",[l("li",[_._v("首先要有响应式设计（源头）")]),_._v(" "),l("li",[_._v("隐藏 + 折行 + 自适应空间")]),_._v(" "),l("li",[_._v("viewport + rem + media query\n"),l("ul",[l("li",[_._v("rem 换算后会有小数，特别精确的地方可能会出问题")]),_._v(" "),l("li",[_._v("media query 在使用时范围大的放上边，范围小的放下边")])])])])])]),_._v(" "),l("h3",{attrs:{id:"_2-4-移动端适配"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-移动端适配"}},[_._v("#")]),_._v(" 2.4 移动端适配")]),_._v(" "),l("ul",[l("li",[_._v("基本概念\n"),l("ul",[l("li",[l("a",{attrs:{href:"https://github.com/jawil/blog/issues/21",target:"_blank",rel:"noopener noreferrer"}},[_._v("css 像素、逻辑像素、设备像素、设备像素比"),l("OutboundLink")],1),_._v(" "),l("ul",[l("li",[_._v("css 像素(css pixels)：是就通常的 px 为单位的像素")]),_._v(" "),l("li",[_._v("逻辑像素：就是 css 像素")]),_._v(" "),l("li",[_._v("设备像素：就是设备的真是物理像素")]),_._v(" "),l("li",[_._v("设备像素比（dpr）：是 设备像素（物理像素）与 css 像素与的比值。假设 retina 屏幕的 dpr = 2，也就是 css 中宽为 100px 的样式是由 200 个物理像素点构成的。")])])]),_._v(" "),l("li",[_._v("viewport\n"),l("ul",[l("li",[l("code",[_._v('<meta name="viewport" content="width=device-width,initial-scale=1.0">')])]),_._v(" "),l("li",[_._v("viewport 分三类\n"),l("ul",[l("li",[_._v("visual viewport 可视页面的宽度")]),_._v(" "),l("li",[_._v("layout viewport 真实页面宽度")]),_._v(" "),l("li",[_._v("ideal viewport 设备理想的宽度")])])]),_._v(" "),l("li",[l("code",[_._v("width=device-width")]),_._v(" => layout viewport = ideal viewport")])])]),_._v(" "),l("li",[_._v("rem\n"),l("ul",[l("li",[_._v("rem 的 "),l("code",[_._v("font-size")]),_._v(" 根据根元素（"),l("code",[_._v("<html>")]),_._v("）计算")]),_._v(" "),l("li",[_._v("em 是根据父元素计算")])])]),_._v(" "),l("li",[_._v("vw\n"),l("ul",[l("li",[_._v("vw 相对于视窗宽度的单位，随宽度变化而变化")])])])])]),_._v(" "),l("li",[_._v("方案一：rem\n"),l("ul",[l("li",[_._v("原理\n"),l("ul",[l("li",[_._v("利用 viewport 和设备像素比调整基准像素：所有样式使用 rem 为单位，将 dpr 比例结合 font-size 用 js 进行设置，就可以实现统一的自适应")]),_._v(" "),l("li",[_._v("将 px 单位的样式转化成 rem 单位：利用 px2rem/postcss-pxtorem 自动转换 css 像素")])])]),_._v(" "),l("li",[_._v("解决方案\n"),l("ul",[l("li",[l("a",{attrs:{href:"https://github.com/imochen/hotcss",target:"_blank",rel:"noopener noreferrer"}},[_._v("hotcss"),l("OutboundLink")],1)]),_._v(" "),l("li",[l("a",{attrs:{href:"https://github.com/amfe/lib-flexible",target:"_blank",rel:"noopener noreferrer"}},[_._v("amfe-flexible"),l("OutboundLink")],1)])])]),_._v(" "),l("li",[_._v("兼容性：非常好")])])]),_._v(" "),l("li",[_._v("方案二：vw\n"),l("ul",[l("li",[_._v("原理\n"),l("ul",[l("li",[_._v("与 rem 类似做法，直接使用 postcss-px-to-viewport 插件进行配置, 配置方式也是和 postcss-pxtorem 大同小异")])])]),_._v(" "),l("li",[_._v("兼容性：较好，只有低版本的 safari 情况下会有兼容性问题")])])])]),_._v(" "),l("h3",{attrs:{id:"_2-5-css-模块化"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-css-模块化"}},[_._v("#")]),_._v(" 2.5 CSS 模块化")]),_._v(" "),l("ul",[l("li",[_._v("命名约定\n"),l("ul",[l("li",[_._v("该类 CSS 模块化方案主要用来规范 CSS命名，最常见的是 BEM、OOCSS 等，在构建工具出现之前，大多数都是在 CSS 命名上做文章。")])])]),_._v(" "),l("li",[_._v("CSS in JS\n"),l("ul",[l("li",[_._v("彻底抛弃 CSS，用 javascript 来写 CSS 规则，常见的有 styled-components。")])])]),_._v(" "),l("li",[_._v("使用 JS 来管理样式\n"),l("ul",[l("li",[_._v("使用 JS 编译原生的 CSS 文件，使其具备模块化的能力，最常见的就是 CSS Modules")])])])]),_._v(" "),l("h3",{attrs:{id:"_2-6-三大框架中的-css"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-三大框架中的-css"}},[_._v("#")]),_._v(" 2.6 三大框架中的 CSS")]),_._v(" "),l("ul",[l("li",[_._v("Scoped CSS\n"),l("ul",[l("li",[_._v("限定了范围的 CSS")]),_._v(" "),l("li",[_._v("无法影响外部元素")]),_._v(" "),l("li",[_._v("外部样式一般不影响内部")]),_._v(" "),l("li",[_._v("模拟 Scoped CSS\n"),l("ul",[l("li",[_._v("方案一：随机选择器\n"),l("ul",[l("li",[_._v("css modules：在 DOM 中使用对应关系设置样式选择器")])])]),_._v(" "),l("li",[_._v("方案二：随机属性\n"),l("ul",[l("li",[l("code",[_._v("<div _abcde />")])]),_._v(" "),l("li",[l("code",[_._v("div[_abcde]{...}")])])])])])])])]),_._v(" "),l("li",[_._v("Angular\n"),l("ul",[l("li",[_._v("Angular.js(1.X)：没有样式集成能力")]),_._v(" "),l("li",[_._v("Angular(2+)：提供了样式封装能力，与组件深度集成\n"),l("ul",[l("li",[l("code",[_._v(":host(.active){...}")]),_._v("：选择组件宿主元素中的元素")]),_._v(" "),l("li",[l("code",[_._v(":host-context(.acive) h1{...}")]),_._v("：宿主元素中，再匹配元素")]),_._v(" "),l("li",[l("code",[_._v("/deep/")]),_._v(" 或 "),l("code",[_._v(">>>")]),_._v(" 穿透："),l("code",[_._v(":host /deep/ h3{...}")])]),_._v(" "),l("li",[l("code",[_._v("ViewEncapsulation")]),_._v(" 样式封装\n"),l("ul",[l("li",[l("code",[_._v("Emulated")]),_._v("：默认值，模拟 Scoped CSS(方案二)，通过在标签上随机属性，来固定样式的作用域")]),_._v(" "),l("li",[l("code",[_._v("Native")]),_._v("：使用原生的 Shadow Dom")]),_._v(" "),l("li",[l("code",[_._v("None")]),_._v("：没有 Shadow Dom，样式没有封装，全局可以使用")])])])])])])]),_._v(" "),l("li",[_._v("Vue\n"),l("ul",[l("li",[l("code",[_._v("<style scoped>")]),_._v("：模拟 Scoped CSS(方案二)\n"),l("ul",[l("li",[_._v("直接使用，无需额外处理")])])]),_._v(" "),l("li",[l("code",[_._v("<style module>")]),_._v("：模拟 Scoped CSS(方案一)\n"),l("ul",[l("li",[l("code",[_._v("<style module> .test{...} </style>")]),_._v("：css module 中的 css 样式对应关系，是绑定在当前实例的 "),l("code",[_._v("$style")]),_._v(" 属性上，即 "),l("code",[_._v("this.$style")])]),_._v(" "),l("li",[l("code",[_._v('<div :class="$style.test"></div>')]),_._v("：使用时，直接写对应关系")])])])])]),_._v(" "),l("li",[_._v("React\n"),l("ul",[l("li",[_._v("官方没有集成方案")]),_._v(" "),l("li",[_._v("社区方案众多\n"),l("ul",[l("li",[_._v("css modules：写对应关系")]),_._v(" "),l("li",[_._v("(babel) react-css-modules：简化后、直接写选择器")]),_._v(" "),l("li",[_._v("styled components：封装成组件")]),_._v(" "),l("li",[_._v("styled jsx：直接在 jsx 中写样式")])])])])])]),_._v(" "),l("h2",{attrs:{id:"_3-javascript"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_3-javascript"}},[_._v("#")]),_._v(" 3.JavaScript")]),_._v(" "),l("h3",{attrs:{id:"_3-1-原型、-原型链"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-原型、-原型链"}},[_._v("#")]),_._v(" 3.1 原型、 原型链")]),_._v(" "),l("ul",[l("li",[_._v("原型对象："),l("code",[_._v("Foo.prototype.constructor === Foo")]),_._v("：每创建一个函数，该函数都有一个 "),l("code",[_._v("prototype")]),_._v(" 属性，该属性的值是一个对象，我们把它叫做该函数的原型对象，这个对象默认有一个 "),l("code",[_._v("constructor")]),_._v(" 属性，该属性指向该函数本身。")]),_._v(" "),l("li",[_._v("隐式原型："),l("code",[_._v("foo.__proto__ === Foo.prototype")]),_._v("：每创建一个对象（"),l("code",[_._v("null")]),_._v("除外），该对象都有一个隐藏属性 "),l("code",[_._v("__proto__")]),_._v("("),l("code",[_._v("[[prototype]]")]),_._v(")，叫做隐式原型，该属性指向了创建这个对象的函数的 "),l("code",[_._v("prototype")]),_._v("属性（即该函数的原型对象）")]),_._v(" "),l("li",[_._v("原型链：访问一个对象的属性时，先在基本属性中查找，如果没有，再沿着 "),l("code",[_._v("__proto__")]),_._v(" 这条链向上找，这就是原型链。")]),_._v(" "),l("li",[_._v("其他：\n"),l("ul",[l("li",[l("code",[_._v("Foo.prototype.__proto__ === Object.prototype")]),_._v("：对象是由 Object 函数创建的")]),_._v(" "),l("li",[l("code",[_._v("Object.prototype.__proto__ === null")]),_._v("：特例")]),_._v(" "),l("li",[l("code",[_._v("Foo.__proto__ === Function.prototype")]),_._v("：函数也是对象")]),_._v(" "),l("li",[l("code",[_._v("Object.__proto__ === Function.prototype")]),_._v("：Object 是函数，也是对象")]),_._v(" "),l("li",[l("code",[_._v("Function.__proto__ === Function.prototype")]),_._v("：Function 是函数，也是对象，一定是被 Function 创建 =》 Function 是被自身创建的")])])])]),_._v(" "),l("h3",{attrs:{id:"_3-2-创建对象的多种方法总结"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-创建对象的多种方法总结"}},[_._v("#")]),_._v(" 3.2 创建对象的多种方法总结")]),_._v(" "),l("ul",[l("li",[_._v("工厂模式：对象无法识别")]),_._v(" "),l("li",[_._v("构造函数：方法属性会在每个实例中重新创建一个，浪费资源")]),_._v(" "),l("li",[_._v("原型模式：引用类型的属性被所有实例共享")]),_._v(" "),l("li",[_._v("组合模式（最常见方式）：封装性看起来比较困惑，分散在构造函数与原型两部分")]),_._v(" "),l("li",[_._v("寄生(parasitic)构造函数：特殊情况下使用，例如想创建一个具有额外方法的特殊数组（修改原生、既有对象）")]),_._v(" "),l("li",[_._v("class（最推荐方式）：是 ES6 中对象模板，是一个语法糖")])]),_._v(" "),l("h3",{attrs:{id:"_3-3-继承的多种方法总结"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-继承的多种方法总结"}},[_._v("#")]),_._v(" 3.3 继承的多种方法总结")]),_._v(" "),l("ul",[l("li",[_._v("借用构造函数/经典继承：方法属性会在每个实例中重新创建一个，浪费资源")]),_._v(" "),l("li",[_._v("原型链继承：用类型被所有实例共享")]),_._v(" "),l("li",[_._v("组合继承/伪经典继承（最常见方式）\n"),l("ul",[l("li",[_._v("ES5：先创造子类的实例对象 "),l("code",[_._v("this")]),_._v("，然后再将父类的方法添加到 "),l("code",[_._v("this")]),_._v(" 上面（"),l("code",[_._v("Parent.apply(this)")]),_._v("）")])])]),_._v(" "),l("li",[_._v("extends（最推荐方式）\n"),l("ul",[l("li",[_._v("ES6：先有父类实例对象的属性和方法，加到 "),l("code",[_._v("this")]),_._v(" 上面（所以必须先调用 "),l("code",[_._v("super")]),_._v(" 方法），然后再用子类的构造函数修改 "),l("code",[_._v("this")]),_._v("。因此只有调用 "),l("code",[_._v("super")]),_._v(" 之后，才可以使用 "),l("code",[_._v("this")]),_._v(" 关键字，否则会报错。")])])])]),_._v(" "),l("h3",{attrs:{id:"_3-4-new-一个对象的过程"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-new-一个对象的过程"}},[_._v("#")]),_._v(" 3.4 "),l("code",[_._v("new")]),_._v(" 一个对象的过程")]),_._v(" "),l("ul",[l("li",[_._v("创建一个新对象。")]),_._v(" "),l("li",[l("code",[_._v("this")]),_._v(" 指向这个新对象。")]),_._v(" "),l("li",[_._v("执行代码，对 "),l("code",[_._v("this")]),_._v(" 赋值。")]),_._v(" "),l("li",[_._v("返回 "),l("code",[_._v("this")]),_._v("。")])]),_._v(" "),l("h3",{attrs:{id:"_3-5-this"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-this"}},[_._v("#")]),_._v(" 3.5 "),l("code",[_._v("this")])]),_._v(" "),l("ul",[l("li",[l("code",[_._v("this")]),_._v(" 要在执行时才能确认值，定义时无法确认。")]),_._v(" "),l("li",[_._v("作为构造函数执行。")]),_._v(" "),l("li",[_._v("作为对象属性执行。")]),_._v(" "),l("li",[_._v("作为普通函数执行。")]),_._v(" "),l("li",[l("code",[_._v("call")]),_._v("、"),l("code",[_._v("apply")]),_._v("、"),l("code",[_._v("bind")]),_._v("。")])]),_._v(" "),l("h3",{attrs:{id:"_3-6-作用域链"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-作用域链"}},[_._v("#")]),_._v(" 3.6 作用域链")]),_._v(" "),l("ul",[l("li",[_._v("没有块级作用域。")]),_._v(" "),l("li",[_._v("当前作用域没有定义的变量，即：自由变量。")]),_._v(" "),l("li",[_._v("作用域链是指自由变量从父级作用域获取值时形成的链条，即自由变量的查找。")]),_._v(" "),l("li",[_._v("函数的父级作用域是它定义时的作用域，不是执行的作用域。")])]),_._v(" "),l("h3",{attrs:{id:"_3-7-闭包"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_3-7-闭包"}},[_._v("#")]),_._v(" 3.7 闭包")]),_._v(" "),l("ul",[l("li",[_._v("使用场景：函数作为返回值；函数作为参数传递。")]),_._v(" "),l("li",[_._v("应用场景：用于封装变量，收敛权限；")])]),_._v(" "),l("h3",{attrs:{id:"_3-8-事件"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_3-8-事件"}},[_._v("#")]),_._v(" 3.8 事件")]),_._v(" "),l("ul",[l("li",[_._v("事件级别\n"),l("ul",[l("li",[_._v("DOM0："),l("code",[_._v("dom.onClick = function(){}")])]),_._v(" "),l("li",[_._v("DOM1：没有事件模型")]),_._v(" "),l("li",[_._v("DOM2：\n"),l("ul",[l("li",[l("code",[_._v("dom.addEventListener('click',function(){},false)")]),_._v(" false：冒泡；true：捕获")]),_._v(" "),l("li",[l("code",[_._v("dom.attachEvent('onclick',function(){})")])])])]),_._v(" "),l("li",[_._v("DOM3：增加事件")])])]),_._v(" "),l("li",[_._v("事件模型：\n"),l("ul",[l("li",[_._v("捕获：window =》 target")]),_._v(" "),l("li",[_._v("冒泡：target =》 window")])])]),_._v(" "),l("li",[_._v("事件流：\n"),l("ul",[l("li",[_._v("点击后，从 window 到达目标元素的捕获阶段。")]),_._v(" "),l("li",[_._v("事件到达目标阶段。")]),_._v(" "),l("li",[_._v("事件从目标元素冒泡到 window 的阶段。")])])]),_._v(" "),l("li",[_._v("自定义事件\n"),l("ul",[l("li",[l("code",[_._v("new Event()")])]),_._v(" "),l("li",[l("code",[_._v("dispatchEvent()")])])])])]),_._v(" "),l("h3",{attrs:{id:"_3-9-防抖、节流"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_3-9-防抖、节流"}},[_._v("#")]),_._v(" 3.9 防抖、节流")]),_._v(" "),l("ul",[l("li",[_._v("防抖：高频操作在某个时限内，只响应一次。")]),_._v(" "),l("li",[_._v("节流：高频操作，段时间内大量触发，降低触发回调的频率，回调执行多次")])]),_._v(" "),l("h3",{attrs:{id:"_3-10-async"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_3-10-async"}},[_._v("#")]),_._v(" 3.10 "),l("code",[_._v("async")])]),_._v(" "),l("ul",[l("li",[_._v("概念\n"),l("ul",[l("li",[l("code",[_._v("async")]),_._v(" 就是 Generator / Promise 函数的语法糖。")]),_._v(" "),l("li",[l("code",[_._v("async")]),_._v(" 函数始终返回的是一个 Promise 对象。")]),_._v(" "),l("li",[l("code",[_._v("await")]),_._v(" 等待的是一个表达式，这个表达式的计算结果是 Promise 对象或者其它值。如果它等到的是一个 Promise 对象，它会阻塞后面的代码（"),l("strong",[_._v("代码串行化")]),_._v("），等着 Promise 对象 "),l("code",[_._v("resolve")]),_._v("，然后得到 "),l("code",[_._v("resolve")]),_._v(" 的值，作为 "),l("code",[_._v("await")]),_._v(" 表达式的运算结果。")]),_._v(" "),l("li",[l("code",[_._v("await")]),_._v(" 必须用在 "),l("code",[_._v("async")]),_._v(" 函数中。"),l("code",[_._v("async")]),_._v(" 函数调用不会造成阻塞，它内部所有的阻塞都被封装在一个 Promise 对象中异步执行。")])])]),_._v(" "),l("li",[_._v("优点\n"),l("ul",[l("li",[_._v("同步的编程风格。")]),_._v(" "),l("li",[l("code",[_._v("async")]),_._v(" 声明的方法，返回 Promise 对象，可以安全的使用 "),l("code",[_._v(".then(...)")]),_._v(" 或者 "),l("code",[_._v("await")]),_._v("。")])])]),_._v(" "),l("li",[_._v("错误处理\n"),l("ul",[l("li",[l("code",[_._v("try...catch")]),_._v("：标准写法；块中的所有异常都将捕获，不仅仅是异步的错误")]),_._v(" "),l("li",[_._v("改造 Promise 使其同时返回错误和结果：类似 Node 错误处理方式")]),_._v(" "),l("li",[_._v("在 Promise 后继续使用 "),l("code",[_._v(".catch()")]),_._v(" 来处理错误：错误优先政策处理，不直观")])])]),_._v(" "),l("li",[_._v("串行与并行\n"),l("ul",[l("li",[_._v("由于 "),l("code",[_._v("await")]),_._v(" 的特性，使得在不特殊处理时代码串行化")]),_._v(" "),l("li",[_._v("并行处理\n"),l("ul",[l("li",[_._v("Promise.all")]),_._v(" "),l("li",[_._v("引用执行")])])])])])]),_._v(" "),l("h3",{attrs:{id:"_3-11-js-模块化"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_3-11-js-模块化"}},[_._v("#")]),_._v(" 3.11 JS 模块化")]),_._v(" "),l("ul",[l("li",[_._v("命名空间\n"),l("ul",[l("li",[_._v("库名.类别名.方法名")]),_._v(" "),l("li",[_._v("容易命名冲突，覆盖")]),_._v(" "),l("li",[_._v("必须知晓具体命名，才能使用方法")])])]),_._v(" "),l("li",[_._v("CommonJS\n"),l("ul",[l("li",[_._v("一个文件为一个模块")]),_._v(" "),l("li",[_._v("通过 "),l("code",[_._v("module.exports")]),_._v(" 暴露模块接口")]),_._v(" "),l("li",[_._v("通过 "),l("code",[_._v("require")]),_._v(" 引入模块")]),_._v(" "),l("li",[_._v("同步执行")])])]),_._v(" "),l("li",[_._v("AMD\n"),l("ul",[l("li",[_._v("Async Module Definition")]),_._v(" "),l("li",[_._v("使用 "),l("code",[_._v("define")]),_._v(" 定义模块")]),_._v(" "),l("li",[_._v("使用 "),l("code",[_._v("require")]),_._v(" 加载模块")]),_._v(" "),l("li",[_._v("RequireJS")]),_._v(" "),l("li",[_._v("依赖前置，提前执行（与 CMD 重要区别）")])])]),_._v(" "),l("li",[_._v("CMD\n"),l("ul",[l("li",[_._v("Common Module Definition")]),_._v(" "),l("li",[_._v("一个文件为一个模块")]),_._v(" "),l("li",[_._v("使用 "),l("code",[_._v("define")]),_._v(" 定义模块")]),_._v(" "),l("li",[_._v("使用 "),l("code",[_._v("require")]),_._v(" 加载模块")]),_._v(" "),l("li",[_._v("SeaJS")]),_._v(" "),l("li",[_._v("尽可能懒执行（与 AMD 重要区别）")])])]),_._v(" "),l("li",[_._v("UMD\n"),l("ul",[l("li",[_._v("Universal Module Definition")]),_._v(" "),l("li",[_._v("通用解决方案")]),_._v(" "),l("li",[_._v("三步骤\n"),l("ul",[l("li",[_._v("判断是否支持 AMD")]),_._v(" "),l("li",[_._v("判断是否支持 CommonJS")]),_._v(" "),l("li",[_._v("如果都不支持，使用全局变量 - 命名空间")])])])])]),_._v(" "),l("li",[_._v("ES6 module\n"),l("ul",[l("li",[_._v("EcmaScripte Module")]),_._v(" "),l("li",[_._v("一个文件为一个模块")]),_._v(" "),l("li",[l("code",[_._v("export")]),_._v(" "),l("code",[_._v("import")])])])]),_._v(" "),l("li",[_._v("Webpack 支持的模块化方式\n"),l("ul",[l("li",[_._v("AMD(RequireJS)")]),_._v(" "),l("li",[_._v("ES Module(推荐)")]),_._v(" "),l("li",[_._v("CommonJS")])])])]),_._v(" "),l("h2",{attrs:{id:"_4-vue"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_4-vue"}},[_._v("#")]),_._v(" 4.Vue")]),_._v(" "),l("h3",{attrs:{id:"_4-1-vue-2-原理"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-vue-2-原理"}},[_._v("#")]),_._v(" 4.1 Vue 2.+ 原理")]),_._v(" "),l("ul",[l("li",[_._v("双向数据绑定-数据劫持\n"),l("ul",[l("li",[l("code",[_._v("Object.defineProperty")]),_._v(" IE9+ 提供给属性 "),l("code",[_._v("getter")]),_._v(" 和 setter 方法。")]),_._v(" "),l("li",[_._v("不足：\n"),l("ul",[l("li",[_._v("数组的 push/pop 等操作")]),_._v(" "),l("li",[_._v("不能监测数组 length 长度的变化")]),_._v(" "),l("li",[_._v("数组的 arr[xxx] = yyy 无法感知")]),_._v(" "),l("li",[_._v("对象属性的添加和删除无法感知")])])]),_._v(" "),l("li",[_._v("改进\n"),l("ul",[l("li",[_._v("对数组方法进行变异")]),_._v(" "),l("li",[_._v("增加 "),l("code",[_._v("$set")]),_._v(" 、"),l("code",[_._v("$delete")]),_._v(" 进行属性的添加、删除")])])])])]),_._v(" "),l("li",[_._v("双向数据绑定-观察者模式\n"),l("ul",[l("li",[_._v("观察者订阅了可观察对象，当可观察对象发布事件，则就直接调度观察者的行为，所以这里观察者和可观察对象其实就产生了一个依赖的关系。与发布订阅模式略有不同，发布订阅有一个事件分发调度中心。")]),_._v(" "),l("li",[_._v("3个关键的类\n"),l("ul",[l("li",[_._v("Observer：主要用于给 Vue 的数据 "),l("code",[_._v("defineProperty")]),_._v(" 增加 "),l("code",[_._v("getter/setter")]),_._v(" 方法，并且在 "),l("code",[_._v("getter/setter")]),_._v("中收集依赖/通知依赖更新")]),_._v(" "),l("li",[_._v("Watcher：观察数据（或者表达式）变化然后执行回调函数")]),_._v(" "),l("li",[_._v("Dep：一个处理依赖关系的对象，主要起到一个纽带的作用")])])])])]),_._v(" "),l("li",[l("img",{attrs:{src:e(250),alt:"Vue"}})]),_._v(" "),l("li",[l("code",[_._v("computed")]),_._v(" 原理\n"),l("ul",[l("li",[_._v("初始化 data和computed,分别代理其set以及get方法, 对data中的所有属性生成唯一的dep实例。")]),_._v(" "),l("li",[_._v("对computed中的reversedMessage生成唯一watcher,并保存在vm._computedWatchers中")]),_._v(" "),l("li",[_._v("访问 reversedMessage，设置Dep.target指向reversedMessage的watcher,调用该属性具体方法reversedMessage。")]),_._v(" "),l("li",[_._v("方法中访问this.message，即会调用this.message代理的get方法，将this.message的dep加入reversedMessage的watcher,同时该dep中的subs添加这个watcher")]),_._v(" "),l("li",[_._v("设置vm.message = 'World'，调用message代理的set方法触发dep的notify方法'")]),_._v(" "),l("li",[_._v("因为是computed属性，只是将watcher中的dirty设置为true")]),_._v(" "),l("li",[_._v("最后一步vm.reversedMessage，访问其get方法时，得知reversedMessage的watcher.dirty为true,调用watcher.evaluate()方法获取新的值。")]),_._v(" "),l("li",[l("ul",[l("li",[_._v("_init => initState =>\n"),l("ul",[l("li",[_._v("initData => new Observer => defineReactive => new Dep,getter:dep.depend(Watcher);setter:dep.notify()")]),_._v(" "),l("li",[_._v("initComputed => new Watcher(dirty,lazy=true) => defineComputed => getter:evaluate()")])])])])])])]),_._v(" "),l("li",[_._v("Vuex 原理\n"),l("ul",[l("li",[_._v("高度依赖于vue的computed依赖检测系统以及其插件系统，")]),_._v(" "),l("li",[_._v("applyMixin方法，该方法主要作用就是在所有组件的beforeCreate生命周期注入了设置this.$store这样一个对象")]),_._v(" "),l("li",[_._v("resetStoreVM => 其本质就是将我们传入的state作为一个隐藏的vue组件的data,也就是说，我们的commit操作，本质上其实是修改这个组件的data值，结合上文的computed,修改被defineReactive代理的对象值后，会将其收集到的依赖的watcher中的dirty设置为true,等到下一次访问该watcher中的值后重新获取最新值。")]),_._v(" "),l("li",[_._v("最后一句话结束vuex工作原理，vuex中的store本质就是没有template的隐藏着的vue组件；")])])])]),_._v(" "),l("h3",{attrs:{id:"_4-2-vue-实例初始化"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-vue-实例初始化"}},[_._v("#")]),_._v(" 4.2 Vue 实例初始化")]),_._v(" "),l("ul",[l("li",[_._v("init 函数\n"),l("ul",[l("li",[_._v("vm 生命周期的相关变量初始化")]),_._v(" "),l("li",[_._v("vm 事件相关初始化")]),_._v(" "),l("li",[_._v("模板开始解析")]),_._v(" "),l("li",[l("code",[_._v("beforeCreate")]),_._v(" 钩子函数")]),_._v(" "),l("li",[_._v("vm 状态初始化\n"),l("ul",[l("li",[l("code",[_._v("props")])]),_._v(" "),l("li",[l("code",[_._v("methods")])]),_._v(" "),l("li",[l("code",[_._v("data")])]),_._v(" "),l("li",[l("code",[_._v("computed")])]),_._v(" "),l("li",[l("code",[_._v("watch")])])])])])]),_._v(" "),l("li",[l("code",[_._v("created")]),_._v(" 钩子函数\n"),l("ul",[l("li",[_._v("实例创建完成")]),_._v(" "),l("li",[_._v("但未挂载到 DOM 中，"),l("code",[_._v("$el")]),_._v("、"),l("code",[_._v("$ref")]),_._v("不能访问")])])]),_._v(" "),l("li",[l("code",[_._v("beforeMount")]),_._v(" 钩子函数\n"),l("ul",[l("li",[_._v("在挂载开始之前被调用")]),_._v(" "),l("li",[_._v("找到对应的 "),l("code",[_._v("template")]),_._v("，并编译成 "),l("code",[_._v("render")]),_._v(" 函数")])])]),_._v(" "),l("li",[l("code",[_._v("mounted")]),_._v(" 钩子函数\n"),l("ul",[l("li",[_._v("实例挂载到 DOM 上，"),l("code",[_._v("$ref")]),_._v(" 属性可以访问")])])]),_._v(" "),l("li",[l("code",[_._v("beforeUpdate")]),_._v(" "),l("ul",[l("li",[_._v("响应式数据更新时调用，发生在虚拟 DOM 打补丁之前")])])]),_._v(" "),l("li",[l("code",[_._v("updated")]),_._v(" "),l("ul",[l("li",[_._v("虚拟 DOM 重新渲染和打补丁之后调用，组件 DOM 已经更新，可执行依赖于 DOM 的操作")])])]),_._v(" "),l("li",[l("code",[_._v("beforeDestroy")]),_._v(" "),l("ul",[l("li",[_._v("实例销毁之前调用。这一步，实例仍然完全可用")])])]),_._v(" "),l("li",[l("code",[_._v("destroyed")]),_._v(" "),l("ul",[l("li",[_._v("实例销毁后调用，调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁")])])])]),_._v(" "),l("h3",{attrs:{id:"_4-3-vue-组件间通信几种方式"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-vue-组件间通信几种方式"}},[_._v("#")]),_._v(" 4.3 Vue 组件间通信几种方式")]),_._v(" "),l("ul",[l("li",[l("code",[_._v("props")]),_._v(" "),l("ul",[l("li",[_._v("父组件向子组件传递值（数组、对象、方法）")])])]),_._v(" "),l("li",[l("code",[_._v("$emit")]),_._v(" "),l("ul",[l("li",[_._v("子组件向父组件传值（通过事件形式）")])])]),_._v(" "),l("li",[_._v("eventBus（"),l("code",[_._v("$emit")]),_._v(" 和 "),l("code",[_._v("$on")]),_._v("）\n"),l("ul",[l("li",[_._v("任意组件间通讯（父子、兄弟、跨级）")]),_._v(" "),l("li",[_._v("通过一个空的 Vue 实例作为中央事件总线，用它来触发事件和监听事件，可以实现任意组件间通讯（父子、兄弟、跨级）")]),_._v(" "),l("li",[_._v("缺点：太多的事件会造成混乱，因为触发和监听分散在各种组件中。")])])]),_._v(" "),l("li",[_._v("Vuex\n"),l("ul",[l("li",[_._v("任意组件间通讯（父子、兄弟、跨级）")]),_._v(" "),l("li",[_._v("Vuex 是一个状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。 Vuex 实现了一个单向数据流，在全局拥有一个 State 存放数据，当组件要更改 State 中的数据时，必须通过 Mutation 进行，Mutation 同时提供了订阅者模式供外部插件调用获取 State 数据的更新。而当所有异步操作或批量的同步操作需要走 Action，但 Action 无法直接修改 State，需要通过 Mutation 来修改 State 的数据。最后，根据 State 的变化，渲染到视图上。")])])]),_._v(" "),l("li",[l("code",[_._v("provide")]),_._v(" 和 "),l("code",[_._v("inject")]),_._v(" "),l("ul",[l("li",[_._v("多层组件间通讯（父子孙）,祖先组件向其所有后代注入一个依赖，始终生效。Vue 2.2 版本引入的新方式")]),_._v(" "),l("li",[_._v("provide 和 inject 绑定并不是可响应的。当你传入了一个可监听的对象，那么其对象的属性还是可响应的。")])])]),_._v(" "),l("li",[l("code",[_._v("$attrs")]),_._v(" 和 "),l("code",[_._v("$listeners")]),_._v(" "),l("ul",[l("li",[_._v("多层组件间通讯（父子孙）。Vue 2.4 版本引入的新方式")]),_._v(" "),l("li",[l("code",[_._v("$attrs")]),_._v("：包含了父作用域中不作为 "),l("code",[_._v("prop")]),_._v(" 被识别 (且获取) 的特性绑定 ("),l("code",[_._v("class")]),_._v(" 和 "),l("code",[_._v("style")]),_._v(" 除外)")]),_._v(" "),l("li",[l("code",[_._v("$listeners")]),_._v("：包含了父作用域中的 (不含 "),l("code",[_._v(".native")]),_._v(" 修饰器的) "),l("code",[_._v("v-on")]),_._v(" 事件监听器")])])]),_._v(" "),l("li",[l("code",[_._v("$refs")]),_._v(", "),l("code",[_._v("$parent")]),_._v(", "),l("code",[_._v("$children")]),_._v(", "),l("code",[_._v("$root")]),_._v(" "),l("ul",[l("li",[_._v("可以直接访问组件示例，然后直接调用组件的方法和访问数据")])])]),_._v(" "),l("li",[_._v("作用域插槽\n"),l("ul",[l("li",[_._v("父组件的插槽中，通过作用域插槽和插槽 prop，可以访问子组件中的数据。")])])])]),_._v(" "),l("h3",{attrs:{id:"_4-4-vdom"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-vdom"}},[_._v("#")]),_._v(" 4.4 vDOM")]),_._v(" "),l("ul",[l("li",[_._v("在 "),l("code",[_._v("render")]),_._v(" 生成，vDOM => creatElement => DOM")]),_._v(" "),l("li",[l("code",[_._v("patch")]),_._v(" 算法：对比新旧 DOM 节点，找出需要更新的节点，再更新（打补丁）")]),_._v(" "),l("li",[_._v("优势\n"),l("ul",[l("li",[_._v("减少 DOM 操作")]),_._v(" "),l("li",[_._v("跨平台能力")])])])]),_._v(" "),l("h3",{attrs:{id:"_4-5-vue-diff-算法"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-vue-diff-算法"}},[_._v("#")]),_._v(" 4.5 Vue Diff 算法")]),_._v(" "),l("ul",[l("li",[l("code",[_._v("patch(old, vNode)")])]),_._v(" "),l("li",[_._v("只在同级比较")]),_._v(" "),l("li",[_._v("不同，直接整个节点(包括子节点)替换")]),_._v(" "),l("li",[_._v("相同，子节点比较")]),_._v(" "),l("li",[_._v("找到真实 DOM 与 vNode, old 比较")]),_._v(" "),l("li",[l("code",[_._v("updateChildren")])])]),_._v(" "),l("h3",{attrs:{id:"_4-6-vue-router-守卫"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_4-6-vue-router-守卫"}},[_._v("#")]),_._v(" 4.6 Vue Router 守卫")]),_._v(" "),l("ul",[l("li",[_._v("全局\n"),l("ul",[l("li",[l("code",[_._v("beforeEach(to, from, next)")])]),_._v(" "),l("li",[l("code",[_._v("beforeResolve")]),_._v("：在导航被确认之前，同时在所有组件内守卫和异步路由组件被解析之后，解析守卫就被调用")]),_._v(" "),l("li",[l("code",[_._v("afterEach(to, from)")])])])]),_._v(" "),l("li",[_._v("独享(路由配置)\n"),l("ul",[l("li",[l("code",[_._v("beforeEnter")])])])]),_._v(" "),l("li",[_._v("组件内\n"),l("ul",[l("li",[l("code",[_._v("beforeRouteEnter(to, from, next)")]),_._v("：不能访问 "),l("code",[_._v("this")]),_._v(",可以通过回调 "),l("code",[_._v("next")]),_._v(" 来访问组件示例")]),_._v(" "),l("li",[l("code",[_._v("beforeRouteUpdate(to, from, next)")])]),_._v(" "),l("li",[l("code",[_._v("beforeRouteLeave(to, from, next)")])])])]),_._v(" "),l("li",[_._v("导航解析流程\n"),l("ul",[l("li",[_._v("导航被触发。")]),_._v(" "),l("li",[_._v("在失活的组件里调用离开守卫 "),l("code",[_._v("beforeRouteLeave")]),_._v("。")]),_._v(" "),l("li",[_._v("调用全局的 "),l("code",[_._v("beforeEach")]),_._v(" 守卫。")]),_._v(" "),l("li",[_._v("在重用的组件里调用 "),l("code",[_._v("beforeRouteUpdate")]),_._v(" 守卫 (2.2+)。")]),_._v(" "),l("li",[_._v("在路由配置里调用 "),l("code",[_._v("beforeEnter")]),_._v("。")]),_._v(" "),l("li",[_._v("解析异步路由组件。")]),_._v(" "),l("li",[_._v("在被激活的组件里调用 "),l("code",[_._v("beforeRouteEnter")]),_._v("。")]),_._v(" "),l("li",[_._v("调用全局的 "),l("code",[_._v("beforeResolve")]),_._v(" 守卫 (2.5+)。")]),_._v(" "),l("li",[_._v("导航被确认。")]),_._v(" "),l("li",[_._v("调用全局的 "),l("code",[_._v("afterEach")]),_._v(" 钩子。")]),_._v(" "),l("li",[_._v("触发 DOM 更新。")]),_._v(" "),l("li",[_._v("用创建好的实例调用 "),l("code",[_._v("beforeRouteEnter")]),_._v(" 守卫中传给 next 的回调函数。")])])])]),_._v(" "),l("h2",{attrs:{id:"_5-前端工程化"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_5-前端工程化"}},[_._v("#")]),_._v(" 5.前端工程化")]),_._v(" "),l("h3",{attrs:{id:"_5-1-css-工程化"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-css-工程化"}},[_._v("#")]),_._v(" 5.1 CSS 工程化")]),_._v(" "),l("ul",[l("li",[_._v("PostCSS\n"),l("ul",[l("li",[_._v("PostCSS 本身只有解析能力，以前是后处理器（CSS=>CSS）,现在很多插件的加入，已经模糊了，它作为后处理器的概念(拥有预处理器的能力)")]),_._v(" "),l("li",[_._v("各种神奇的特性全靠插件")]),_._v(" "),l("li",[_._v("目前至少有 200 多个插件\n"),l("ul",[l("li",[_._v("import 模块合并")]),_._v(" "),l("li",[_._v("autoprefixier 自动添加前缀")]),_._v(" "),l("li",[_._v("cssnano 压缩代码")]),_._v(" "),l("li",[_._v("cssnext 使用 CSS 新特性")]),_._v(" "),l("li",[_._v("precss 变量、mixin、循环等")])])]),_._v(" "),l("li",[_._v("支持各种构件工具：自身cli、webpack、gulp、grunt、rollup 等")])])]),_._v(" "),l("li",[_._v("webpack 与 CSS\n"),l("ul",[l("li",[_._v("css-loader 将 CSS 变成 JS")]),_._v(" "),l("li",[_._v("style-loader 将 JS 样式插入 head")]),_._v(" "),l("li",[_._v("ExtractTextPlugin 将 CSS 从 JS 中提取出来")]),_._v(" "),l("li",[_._v("css modules 解决 CSS 命名冲突问题")]),_._v(" "),l("li",[_._v("less-loader sass-loader 各种预处理器")]),_._v(" "),l("li",[_._v("postcss-loader PostCSS 处理")])])])]),_._v(" "),l("h3",{attrs:{id:"_5-2-webpack-与-grunt-gulp"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-webpack-与-grunt-gulp"}},[_._v("#")]),_._v(" 5.2 webpack 与 grunt/gulp")]),_._v(" "),l("ul",[l("li",[_._v("相同点：都可以用于项目打包、文件压缩、文件监测等。")]),_._v(" "),l("li",[_._v("webpack 是一个模块打包器（module bundler），他可以递归的打包项目中的所有模块，最终生成几个打包好的文件。他支持 code-splitting(代码分割)、模块化(AMD,ESM,CommonJS)、全局模块化。主要侧重于模块的打包，适合于单页面的项目，开发中的所有资源（图片、js、css 等）都看成模块，通过 loader 和 plugins 对资源进行处理，打包成符合生产环境部署的前端资源。")]),_._v(" "),l("li",[_._v("grunt/gulp 是自动化构建工具（tast runner），就是用来代替手工执行机械重复的事情。侧重于前端开发的工作流程，通过配置一系列的task，定义执行顺序，从而构建项目的整个前端开发流程。")])]),_._v(" "),l("h3",{attrs:{id:"_5-3-什么是长缓存，在-webpack-中如何做到长缓存优化"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-什么是长缓存，在-webpack-中如何做到长缓存优化"}},[_._v("#")]),_._v(" 5.3 什么是长缓存，在 webpack 中如何做到长缓存优化")]),_._v(" "),l("ul",[l("li",[_._v("浏览器在用户访问页面时，为了加快加载速度，会对用户访问的静态资源进行存储。但是每次更新、代码升级，都需要浏览器重新下载新的代码，最简单的更新方式就是引入新的文件名称。")]),_._v(" "),l("li",[_._v("在 webpack 中可以在 output 中给输出文件指定 filename 为 chunkhash")]),_._v(" "),l("li",[_._v("分类业务代码和框架代码（引入第三方模块、webpack runtime、等）")]),_._v(" "),l("li",[_._v("通过 NamedModulesPlugin 或 HashedModuleIdsPlugin 使得没有更新的业务代码文件名不变")])]),_._v(" "),l("h3",{attrs:{id:"_5-4-webpack3-与-webpack4"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-webpack3-与-webpack4"}},[_._v("#")]),_._v(" 5.4 webpack3 与 webpack4")]),_._v(" "),l("ul",[l("li",[_._v("新增 mode\n"),l("ul",[l("li",[_._v("production 默认开起了很多代码优化（minify, splite）")]),_._v(" "),l("li",[_._v("development")]),_._v(" "),l("li",[_._v("none 取消所有默认设置")])])]),_._v(" "),l("li",[_._v("移除 CommonsChunkPlugin，变更为 optimization.splitChunks，optimization.runtimeChunk")]),_._v(" "),l("li",[_._v("ExtractTextWebpackPlugin 调整，建议使用新的 CSS 提取插件 mini-css-extract-plugin")]),_._v(" "),l("li",[_._v("支持 ES 6的方式导入 JSON 文件")])]),_._v(" "),l("h3",{attrs:{id:"_5-5-webpack-中的几个概念"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_5-5-webpack-中的几个概念"}},[_._v("#")]),_._v(" 5.5 webpack 中的几个概念")]),_._v(" "),l("ul",[l("li",[_._v("Entery 代码入口，打包入口，单个或者多个（多页面程序等）")]),_._v(" "),l("li",[_._v("Output 打包成的文件（bundle），单个或者多个，自定义规则")]),_._v(" "),l("li",[_._v("Loaders 处理文件（除去 js 以外的其他文件），将文件转化成模块（js 可以识别的模块）")]),_._v(" "),l("li",[_._v("Plugins 参与打包整个过程，打包优化和压缩，配置编译时的变量，极其灵活")]),_._v(" "),l("li",[_._v("module 是开发中的单独模块")]),_._v(" "),l("li",[_._v("chunk 是 webpack 在进行模块依赖分析时，代码分割出来的代码块，最终打包成 bundle")]),_._v(" "),l("li",[_._v("bundle 是 webpack 打包出来的文件")]),_._v(" "),l("li",[_._v("loader 是告诉 webpack 如何转化处理某一类型的文件，并且引入到打包出的文件中")]),_._v(" "),l("li",[_._v("plugin 是自定义 webpack 打包过程的方式，一个插件是包含 apply 方法的一个对象，通过这个方法可以参与到整个 webpack 打包的各个流程（真个生命周期）")])]),_._v(" "),l("h3",{attrs:{id:"_5-6-webpack-特色功能"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_5-6-webpack-特色功能"}},[_._v("#")]),_._v(" 5.6 webpack 特色功能")]),_._v(" "),l("ul",[l("li",[_._v("提取公共代码\n"),l("ul",[l("li",[_._v("减少代码冗余，提高加载速度")]),_._v(" "),l("li",[_._v("plugins 中 "),l("code",[_._v("new webpack.optimize.CommonsChunkPlugin(option)")])]),_._v(" "),l("li",[_._v("4.0 不在 plugins 中设置，在 optimization.splitChunks 中设置")])])]),_._v(" "),l("li",[_._v("Tree Shaking\n"),l("ul",[l("li",[_._v("JS Tree Shaking\n"),l("ul",[l("li",[_._v("Webpack.optimize.UglifyJsPlugin")]),_._v(" "),l("li",[_._v("4.0 不在 plugins 中设置，在 optimization.splitChunks 中设置")]),_._v(" "),l("li",[_._v("或者直接指定 mode: 'production' 将自动完成")])])]),_._v(" "),l("li",[_._v("CSS Tree Shaking\n"),l("ul",[l("li",[_._v("purifycss-webpack\n"),l("ul",[l("li",[_._v("paths:glob.sync({})")]),_._v(" "),l("li",[_._v("npm install glob-all")])])])])])])]),_._v(" "),l("li",[_._v("代码分割和懒加载")]),_._v(" "),l("li",[_._v("生成 HTML：html-webpack-plugin、html-loader")]),_._v(" "),l("li",[_._v("图片处理：file-loader、url-loader、img-loader、postcss-spirtes")])]),_._v(" "),l("h3",{attrs:{id:"_5-7-优化-webpack-打包速度"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_5-7-优化-webpack-打包速度"}},[_._v("#")]),_._v(" 5.7 优化 webpack 打包速度")]),_._v(" "),l("ul",[l("li",[_._v("原因\n"),l("ul",[l("li",[_._v("文件多")]),_._v(" "),l("li",[_._v("依赖多")]),_._v(" "),l("li",[_._v("loader 使用方式")])])]),_._v(" "),l("li",[_._v("分析\n"),l("ul",[l("li",[_._v("分开 vendor 和 app\n"),l("ul",[l("li",[_._v("DllPlugin")]),_._v(" "),l("li",[_._v("DllReferencePligin")])])]),_._v(" "),l("li",[_._v("UglifyJsPlugin 混淆\n"),l("ul",[l("li",[_._v("parallel: true 多线程处理")]),_._v(" "),l("li",[_._v("cache: true 利用缓存")])])]),_._v(" "),l("li",[_._v("happypack\n"),l("ul",[l("li",[_._v("loader 多线程")])])]),_._v(" "),l("li",[_._v("babel-loader\n"),l("ul",[l("li",[_._v("cacheDirectory")]),_._v(" "),l("li",[_._v("include")]),_._v(" "),l("li",[_._v("exclude")])])]),_._v(" "),l("li",[_._v("上线去除 SourceMap")])])])]),_._v(" "),l("h2",{attrs:{id:"_6-算法"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_6-算法"}},[_._v("#")]),_._v(" 6.算法")]),_._v(" "),l("h3",{attrs:{id:"_6-1-常见的几种排序算法"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-常见的几种排序算法"}},[_._v("#")]),_._v(" 6.1 常见的几种排序算法")]),_._v(" "),l("ul",[l("li",[_._v("冒泡\n"),l("ul",[l("li",[_._v("比较相邻元素，左 > 右，交换位置 => 最后最大")]),_._v(" "),l("li",[_._v("前 n-1 重复步骤 1")]),_._v(" "),l("li",[_._v("直到完毕")])])]),_._v(" "),l("li",[_._v("快速\n"),l("ul",[l("li",[_._v("取出一个数为基准")]),_._v(" "),l("li",[l("code",[_._v(">")]),_._v(" 基准放右边，"),l("code",[_._v("<")]),_._v(" 基准放左边")]),_._v(" "),l("li",[_._v("左右区间重复步骤 2，直到个区间只有一个数")])])]),_._v(" "),l("li",[_._v("选择\n"),l("ul",[l("li",[_._v("未排序中找到最大/小，放在起始位置")]),_._v(" "),l("li",[_._v("在剩余中找到最大/小，排在已排序的末尾")]),_._v(" "),l("li",[_._v("在未排序中重复步骤 2，直到完毕")])])])]),_._v(" "),l("h3",{attrs:{id:"_6-2-时间复杂度、空间复杂度"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-时间复杂度、空间复杂度"}},[_._v("#")]),_._v(" 6.2 时间复杂度、空间复杂度")]),_._v(" "),l("p",[_._v("算法（Algorithm）是指用来操作数据、解决程序问题的一组方法。对于同一个问题，使用不同的算法，也许最终得到的结果是一样的，但在过程中消耗的资源和时间却会有很大的区别。")]),_._v(" "),l("ul",[l("li",[_._v("如何去衡量不同算法之间的优劣，主要从算法所占用的「时间」和「空间」两个维度去考量。\n"),l("ul",[l("li",[_._v("时间维度：是指执行当前算法所消耗的时间，我们通常用「时间复杂度」来描述。")]),_._v(" "),l("li",[_._v("空间维度：是指执行当前算法需要占用多少内存空间，我们通常用「空间复杂度」来描述。")])])]),_._v(" "),l("li",[_._v("时间复杂度\n"),l("ul",[l("li",[_._v("大O符号表示法中，时间复杂度的公式是：T(n) = O(f(n))，其中f(n) 表示每行代码执行次数之和，而 O 表示正比例关系，这个公式的全称是：算法的渐进时间复杂度。")]),_._v(" "),l("li",[_._v("大O符号表示法并不是用于来真实代表算法的执行时间的，它是用来表示代码执行时间的增长变化趋势的。")]),_._v(" "),l("li",[_._v("O(1)：无论代码执行了多少行，只要是没有循环等复杂结构，那这个代码的时间复杂度就都是O(1)")]),_._v(" "),l("li",[_._v("O(n)：线性阶 一层循环")]),_._v(" "),l("li",[_._v("O(logN)：对数阶 循环中 "),l("code",[_._v("i = i * 2")])]),_._v(" "),l("li",[_._v("O(nlogN)：一层循环 包裹 对数阶")]),_._v(" "),l("li",[_._v("O(n²)：平方阶 双层循环")]),_._v(" "),l("li",[_._v("O(n^k)：K次方阶 k层循环")])])]),_._v(" "),l("li",[_._v("空间复杂度\n"),l("ul",[l("li",[_._v("空间复杂度是对一个算法在运行过程中临时占用存储空间大小的一个量度，同样反映的是一个趋势，我们用 S(n) = O(f(n)) 来定义。")]),_._v(" "),l("li",[_._v("O(1)：如果算法执行所需要的临时空间不随着某个变量n的大小而变化，即此算法空间复杂度为一个常量，可表示为 O(1)")]),_._v(" "),l("li",[_._v("O(n)：例如new了一个数组出来，这个数据占用的大小为n，就是空间复杂度为O(n)")])])])]),_._v(" "),l("h3",{attrs:{id:"_6-3-动态规划"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-动态规划"}},[_._v("#")]),_._v(" 6.3 动态规划")]),_._v(" "),l("p",[_._v("动态规划算法是通过拆分，定义问题的状态和状态之间的关系，是的问题可以通递推的方式解决。与分制发类似，将带求解的问题分解成若干个子问题，按顺序求解子问题，前一个子问题的解，为后一个子问题提供有用的信息，在求解子问题时，列出可能的局部解，通过决策保留最优解，丢弃其他解，依次决绝完子问题，就能得到最终的解。")]),_._v(" "),l("p",[_._v("关键步骤：")]),_._v(" "),l("ul",[l("li",[_._v("划分阶段")]),_._v(" "),l("li",[_._v("确定阶段的状态和状态变量")]),_._v(" "),l("li",[_._v("确定决策，并写出状态转移方程")]),_._v(" "),l("li",[_._v("确定边界值")])]),_._v(" "),l("h2",{attrs:{id:"_7-others"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_7-others"}},[_._v("#")]),_._v(" 7.Others")]),_._v(" "),l("h3",{attrs:{id:"_7-1-测试"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-测试"}},[_._v("#")]),_._v(" 7.1 测试")]),_._v(" "),l("ul",[l("li",[_._v("测试\n"),l("ul",[l("li",[l("a",{attrs:{href:"https://mochajs.org/",target:"_blank",rel:"noopener noreferrer"}},[_._v("mocha"),l("OutboundLink")],1),_._v(" 测试框架 "),l("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2015/12/a-mocha-tutorial-of-examples.html",target:"_blank",rel:"noopener noreferrer"}},[_._v("教程"),l("OutboundLink")],1)]),_._v(" "),l("li",[l("a",{attrs:{href:"https://www.chaijs.com/",target:"_blank",rel:"noopener noreferrer"}},[_._v("chai"),l("OutboundLink")],1),_._v(" 断言库 assertion "),l("a",{attrs:{href:"https://github.com/frontend9/fe9-library/issues/222",target:"_blank",rel:"noopener noreferrer"}},[_._v("文档"),l("OutboundLink")],1)]),_._v(" "),l("li",[l("a",{attrs:{href:"https://jestjs.io/",target:"_blank",rel:"noopener noreferrer"}},[_._v("jest"),l("OutboundLink")],1),_._v(" 通用测试运行器")]),_._v(" "),l("li",[l("a",{attrs:{href:"https://vue-test-utils.vuejs.org/zh/",target:"_blank",rel:"noopener noreferrer"}},[_._v("vue-test-utils"),l("OutboundLink")],1),_._v(" Vue 专用页面测试工具")]),_._v(" "),l("li",[l("a",{attrs:{href:"https://www.npmjs.com/package/selenium-webdriver",target:"_blank",rel:"noopener noreferrer"}},[_._v("selenium-webdriver"),l("OutboundLink")],1),_._v(" 多浏览器页面自动执行测试工具")]),_._v(" "),l("li",[l("a",{attrs:{href:"https://pptr.dev/",target:"_blank",rel:"noopener noreferrer"}},[_._v("Puppeteer"),l("OutboundLink")],1),_._v(" chorme 页面自动执行测试工具")])])]),_._v(" "),l("li",[_._v("持续集成\n"),l("ul",[l("li",[l("a",{attrs:{href:"https://travis-ci.org/",target:"_blank",rel:"noopener noreferrer"}},[_._v("travis-ci"),l("OutboundLink")],1),_._v(" 在线持续集成测试工具")])])]),_._v(" "),l("li",[_._v("代码覆盖率\n"),l("ul",[l("li",[l("a",{attrs:{href:"https://docs.codecov.io/docs",target:"_blank",rel:"noopener noreferrer"}},[_._v("codecov"),l("OutboundLink")],1),_._v(" 在线持续集成代码测试覆盖率工具")]),_._v(" "),l("li",[l("a",{attrs:{href:"https://istanbul.js.org/",target:"_blank",rel:"noopener noreferrer"}},[_._v("istanbul"),l("OutboundLink")],1),_._v(" js 代码覆盖率测试工具 "),l("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2015/06/istanbul.html",target:"_blank",rel:"noopener noreferrer"}},[_._v("教程"),l("OutboundLink")],1)])])]),_._v(" "),l("li",[_._v("性能测试\n"),l("ul",[l("li",[l("a",{attrs:{href:"https://benchmarkjs.com/",target:"_blank",rel:"noopener noreferrer"}},[_._v("Benchmark.js"),l("OutboundLink")],1),_._v(" api 性能测试工具")]),_._v(" "),l("li",[l("a",{attrs:{href:"https://jsperf.com/",target:"_blank",rel:"noopener noreferrer"}},[_._v("jsPerf"),l("OutboundLink")],1),_._v(" api 性能测试工具")])])])]),_._v(" "),l("h3",{attrs:{id:"_7-2-跨域"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-跨域"}},[_._v("#")]),_._v(" 7.2 跨域")]),_._v(" "),l("p",[_._v("同源策略（same origin policy）：是浏览器核心的安全功能，所谓同源是指：协议、域名、端口三者全部相同。")]),_._v(" "),l("ul",[l("li",[_._v("浏览器对非同源的 JS 脚本有 3 种行为受到限制：\n"),l("ul",[l("li",[_._v("Cookie、LocalStorage、SessionStorage 和 IndexDB 无法读取")]),_._v(" "),l("li",[_._v("DOM 无法获得")]),_._v(" "),l("li",[_._v("AJAX 请求不能发送")])])]),_._v(" "),l("li",[_._v("浏览器允许跨域加载 3 种资源\n"),l("ul",[l("li",[l("code",[_._v('<img src="">')]),_._v("：用于打点统计，统计网站可以是其他域。")]),_._v(" "),l("li",[l("code",[_._v('<script src="">')]),_._v("：可以用于 "),l("code",[_._v("JSONP")]),_._v(" 请求。")]),_._v(" "),l("li",[l("code",[_._v('<link href="">')]),_._v("：可以使用 CDN")])])]),_._v(" "),l("li",[_._v("通信跨域(指受同源限制的前两点)的解决方案\n"),l("ul",[l("li",[_._v("通过 "),l("code",[_._v("hash")]),_._v("（"),l("code",[_._v("#")]),_._v("）")]),_._v(" "),l("li",[_._v("window.name")]),_._v(" "),l("li",[_._v("postMessage：上面两种方法都属于破解，HTML5 为了解决这个问题，引入了一个全新的 API")])])]),_._v(" "),l("li",[_._v("AJAX 跨域的解决方案\n"),l("ul",[l("li",[_._v("JSONP\n"),l("ul",[l("li",[_._v("优点：兼容性好，老浏览器全部支持；服务器改动较小")]),_._v(" "),l("li",[_._v("缺点：只能发送 get 请求；没有浏览器的请求状态")]),_._v(" "),l("li",[_._v("原理：利用 "),l("code",[_._v("<script>")]),_._v(" 元素不受同源策略的限制")])])]),_._v(" "),l("li",[_._v("WebSocket\n"),l("ul",[l("li",[_._v("优点：双向通讯")]),_._v(" "),l("li",[_._v("缺点：使用全新通讯协议，前后端改动巨大")]),_._v(" "),l("li",[_._v("WebSocket 是一种通信协议，该协议不实行同源政策，只要服务器支持，就可以通过它进行跨源通信。")])])]),_._v(" "),l("li",[_._v("CORS：跨源资源分享（Cross-Origin Resource Sharing）\n"),l("ul",[l("li",[_._v("优点：不限制请求类型；与同源的 AJAX 通信没有差别，代码完全一样")]),_._v(" "),l("li",[_._v("缺点：需要浏览器支持。目前，所有浏览器都支持该功能，IE 浏览器 ≥IE10；需要服务器同时配置")]),_._v(" "),l("li",[_._v("原理：\n"),l("ul",[l("li",[_._v("浏览器将 CORS 请求分成两类：简单请求（simple request）和非简单请求（not-so-simple request)。")]),_._v(" "),l("li",[_._v("对于简单请求，浏览器直接发出 CORS 请求，自动在头信息之中，添加一个 "),l("code",[_._v("Origin")]),_._v(" 字段，用来说明请求的来源（协议 + 域名 + 端口），服务器根据这个值，做出处理。")]),_._v(" "),l("li",[_._v('非简单请求的 CORS 请求，浏览器会增加一次 HTTP 查询请求（OPTIONS），称为"预检"请求（preflight）， 服务器收到 OPTIONS 后，根据这几个关键字段，做出回应。一旦服务器通过了 OPTIONS 请求，以后每次浏览器正常的 CORS 请求，就都跟简单请求一样进行处理。')])])])])]),_._v(" "),l("li",[_._v("反向代理\n"),l("ul",[l("li",[_._v("优点：纯前端解决方案")]),_._v(" "),l("li",[_._v("原理：同源策略是浏览器的安全策略，不是 HTTP 协议的一部分。服务器端之间调用 HTTP 接口只是使用 HTTP 协议，也就不存在跨越问题。请求过程：浏览器向代理（同源）服务器发起请求，再由代理（同源）服务器请求外部服务器。")]),_._v(" "),l("li",[_._v("应用：\n"),l("ul",[l("li",[_._v("开发：设置 webpack devServer proxy（webpack 的 proxy 基于 "),l("code",[_._v("http-proxy-middleware")]),_._v("）")]),_._v(" "),l("li",[_._v("生产：nginx 服务器配置反向代理接口")])])])])])])])]),_._v(" "),l("h3",{attrs:{id:"_7-3-页面加载"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_7-3-页面加载"}},[_._v("#")]),_._v(" 7.3 页面加载")]),_._v(" "),l("ul",[l("li",[_._v("加载页面和资源的过程\n"),l("ul",[l("li",[_._v("浏览器根据 DNS 服务器得到域名的 IP 地址。")]),_._v(" "),l("li",[_._v("浏览器向这个 IP 的服务器发送 http 请求。")]),_._v(" "),l("li",[_._v("服务器收到、处理并返回 http 请求。")]),_._v(" "),l("li",[_._v("浏览器得到返回值。")])])]),_._v(" "),l("li",[_._v("浏览器渲染页面的过程\n"),l("ul",[l("li",[_._v("根据 HTML 结构生成 DOM Tree。")]),_._v(" "),l("li",[_._v("根据 CSS 生成 CSSOM。")]),_._v(" "),l("li",[_._v("将 DOM Tree 和 CSSOM 整合形成 RenderTree（渲染树）。")]),_._v(" "),l("li",[_._v("根据 RenderTree 开始渲染和展开。")]),_._v(" "),l("li",[_._v("遇到 "),l("code",[_._v("<script>")]),_._v(" 时，会执行并阻塞渲染。")])])]),_._v(" "),l("li",[l("code",[_._v("window.onload")]),_._v(" 和 "),l("code",[_._v("DOMContentLoaded")]),_._v(" "),l("ul",[l("li",[l("code",[_._v("load")]),_._v("：页面全部资源加载完才执行，包括图片、视频等。"),l("br"),_._v(" "),l("code",[_._v("window.onload = function(){...}")]),_._v(" 就是 "),l("code",[_._v("window.addEventListener('load',function(){...})")]),_._v("。")]),_._v(" "),l("li",[l("code",[_._v("DOMContentLoaded")]),_._v("：DOM 渲染完即可执行，此时图片、视频等可能还没有加载完成。"),l("br"),_._v(" "),l("code",[_._v("window.addEventListener('DOMContentLoaded',function(){...})")]),_._v(" 就是 jQuery 中的 "),l("code",[_._v("$(document).ready(function(){...})")]),_._v(" 或者 "),l("code",[_._v("$(function(){...})")]),_._v("。")])])])]),_._v(" "),l("h3",{attrs:{id:"_7-4-渲染机制"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_7-4-渲染机制"}},[_._v("#")]),_._v(" 7.4 渲染机制")]),_._v(" "),l("ul",[l("li",[_._v("DOCTYPE\n"),l("ul",[l("li",[_._v("DOCTYPE 是用来声明文档类型和 DTD(文档类型定义，浏览器用它来判断文档类型) 规范的，用于文档合法性检查。")]),_._v(" "),l("li",[_._v("常用\n"),l("ul",[l("li",[_._v("HTML5："),l("code",[_._v("<!DOCTYPE html>")])]),_._v(" "),l("li",[_._v("HTML4：有两种，严格模式（不包含展示性和弃用的元素）和传统模式（全部包含）。")])])])])]),_._v(" "),l("li",[_._v("浏览器渲染过程")]),_._v(" "),l("li",[_._v("Reflow 重排\n"),l("ul",[l("li",[_._v("DOM 结构中的各个元素都有自己的盒子(模型),这些都需要浏览器根据各种样式来计算并根据计算结果将元素放到它该出现的位置,这个过程称之为 Reflow。")]),_._v(" "),l("li",[_._v("触发 Reflow\n"),l("ul",[l("li",[_._v("当你增加、删除、修改 DOM 节点时,会导致 Reflow 或 Repaint。")]),_._v(" "),l("li",[_._v("当你移动 DOM 的位置,或是搞个动画的时候。")]),_._v(" "),l("li",[_._v("当你修改 CSS 样式的时候。")]),_._v(" "),l("li",[_._v("当你 Resize 窗口的时候(移动端没有这个问题),或是滚动的时候。")]),_._v(" "),l("li",[_._v("当你修改网页的默认字体时。")])])])])]),_._v(" "),l("li",[_._v("Repaint 重绘\n"),l("ul",[l("li",[_._v("当各种盒子的位置、大小以及其他属性,例如颜色、字体大小等都确定下来后,浏览器于是便把这些元素都按照各自的特性绘制了一遍,于是页面的内容出现了,这个过程称之为 Repaint。")]),_._v(" "),l("li",[_._v("触发 Repaint\n"),l("ul",[l("li",[_._v("DOM 改动")]),_._v(" "),l("li",[_._v("CSS 改动")])])])])])]),_._v(" "),l("h3",{attrs:{id:"_7-5-性能优化"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_7-5-性能优化"}},[_._v("#")]),_._v(" 7.5 性能优化")]),_._v(" "),l("ul",[l("li",[_._v("原则\n"),l("ul",[l("li",[_._v("多使用内存、缓存或者其他方法。")]),_._v(" "),l("li",[_._v("减少 CPU 计算。")]),_._v(" "),l("li",[_._v("减少网络。")])])]),_._v(" "),l("li",[_._v("入手方向\n"),l("ul",[l("li",[_._v("加载页面和资源：\n"),l("ul",[l("li",[_._v("静态资源的合并压缩。")]),_._v(" "),l("li",[_._v("非核心代码的异步加载。\n"),l("ul",[l("li",[l("code",[_._v("defer")]),_._v("：异步加载，在 HTML 解析完之后(所有元素解析完成之后，DOMContentLoaded 事件触发之前)才执行，多个时按照加载顺序执行(浏览器实现时不能确定是顺序执行)。=》更推荐。")]),_._v(" "),l("li",[l("code",[_._v("async")]),_._v("：异步加载完后立即执行，多个时执行顺序与加载顺序无关。")])])]),_._v(" "),l("li",[_._v("利用静态资源缓存 - 只有内容改变时，资源链接名称才改变。\n"),l("ul",[l("li",[_._v("缓存分类：强缓存、协商缓存。")])])]),_._v(" "),l("li",[_._v("使用 CDN 让资源加载更快。")]),_._v(" "),l("li",[_._v("预解析 DNS。\n"),l("ul",[l("li",[l("code",[_._v('<meta http-equiv="x-dns-prefetch-control" content="on" />')])]),_._v(" "),l("li",[l("code",[_._v('<link rel="dns-prefetch" href="http://xxxxm" />')])])])]),_._v(" "),l("li",[_._v("使用 SSR 后端渲染，数据直接输出到 HTML 中。")])])]),_._v(" "),l("li",[_._v("页面渲染：\n"),l("ul",[l("li",[_._v("CSS 放前，JS 放后。")]),_._v(" "),l("li",[_._v("懒加载（图片懒加载，下拉加载更多）- 图片开始的地址是一个默认图片，等图片加载完后，在加载真正的地址。")]),_._v(" "),l("li",[_._v("减少 DOM 查询，对 DOM 查询做缓存 - 循环时，尽量先缓存 DOM。\n"),l("code",[_._v("var dList = document.getElementByTagName('div'); for(var i=0; i<dList.length; i++){}")])]),_._v(" "),l("li",[_._v("减少 DOM 操作，多个操作尽量合并执行 - 先对片段操作，最后在一次进行 DOM 操作。"),l("br"),_._v(" "),l("code",[_._v("var frag = document.createDocumentFragment(); for(...){...} trueDom.appendChild(grag)")])]),_._v(" "),l("li",[_._v("事件节流、事件防抖。\n"),l("ul",[l("li",[_._v("节流的目的是：降低触发回调的频率，减少不必要的过多的调用。 常应用于：DOM 元素的拖拽功能实现（mousemove）；搜索联想（keyup）；页面底部自动加载更多。")]),_._v(" "),l("li",[_._v("防抖的目的是：高频（由 wait 来确定）操作下只响应一次。 常应用于：resize、scroll、mousedown、mousemove等；文本输入的验证（keyup、keydown）。")])])]),_._v(" "),l("li",[_._v("尽早执行操作（"),l("code",[_._v("DOMContentLoaded")]),_._v("）。")])])])])])]),_._v(" "),l("h3",{attrs:{id:"_7-6-安全性"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_7-6-安全性"}},[_._v("#")]),_._v(" 7.6 安全性")]),_._v(" "),l("ul",[l("li",[_._v("XSS 跨站脚本攻击\n"),l("ul",[l("li",[_._v("利用合法的渠道（留言等），向页面注入脚本。")]),_._v(" "),l("li",[_._v("前端替换关键字，后端替换更好。")])])]),_._v(" "),l("li",[_._v("XSRF/CSRF 跨站请求伪造\n"),l("ul",[l("li",[_._v("原理：\n"),l("ul",[l("li",[_._v("在网站 A 登陆过，有 cookie 认证，B 网站引诱点击，请求 A 网站的漏洞链接。")])])]),_._v(" "),l("li",[_._v("防御措施：\n"),l("ul",[l("li",[_._v("Token 验证。")]),_._v(" "),l("li",[_._v("Referer 验证页面来源。")]),_._v(" "),l("li",[_._v("隐藏令牌，类似 Token。")])])])])]),_._v(" "),l("li",[_._v("点击劫持\n"),l("ul",[l("li",[_._v("这是一种欺骗性比较强，同时也需要用户高度参与才能完成的一种攻击\n"),l("ul",[l("li",[_._v("攻击者构造一个诱导用户点击的内容，如Web页面小游戏")]),_._v(" "),l("li",[_._v("将被攻击的页面放入到iframe当中")]),_._v(" "),l("li",[_._v("利用z-index等CSS样式将这个iframe叠加到小游戏的垂直方向的正上方")]),_._v(" "),l("li",[_._v("把iframe设置为100%透明度")]),_._v(" "),l("li",[_._v("受害者访问这个页面，肉眼看到的是一个小游戏，如果受到诱导进行了点击的话，实际上点击到的却是iframe中的页面点击劫持的危害在于，攻击利用了受害者的用户身份，在其不知情的情况下进行一些操作。")])])])])]),_._v(" "),l("li",[_._v("HTTPS 中间人攻击\n"),l("ul",[l("li",[_._v("即使是服务器端开启了 HTTPS，也还是存在安全隐患，黑客可以利用 SSL Stripping 这种攻击手段，强制让 HTTPS 降级回 HTTP，从而继续进行中间人攻击。")]),_._v(" "),l("li",[_._v("用户在浏览器里输入 URL 的时候往往不是从 https:// 开始的，而是直接从域名开始输入，随后浏览器向服务器发起 HTTP 通信，然而由于攻击者的存在，它把服务器端返回的跳转到 HTTPS 页面的响应拦截了，并且代替客户端和服务器端进行后续的通信。由于这一切都是暗中进行的，所以使用前端应用的用户对此毫无察觉。")]),_._v(" "),l("li",[_._v("使用 HSTS（HTTP Strict Transport Security），它通过下面这个 HTTP Header 以及一个预加载的清单，来告知浏览器在和网站进行通信的时候强制性的使用 HTTPS，而不是通过明文的 HTTP 进行通信。")])])]),_._v(" "),l("li",[_._v("CDN劫持/污染\n"),l("ul",[l("li",[_._v("如果攻击者劫持了 CDN，或者对 CDN 中的资源进行了污染，那么我们的前端应用拿到的就是有问题的 JS 脚本。这种攻击方式造成的效果和XSS跨站脚本攻击相似。")]),_._v(" "),l("li",[_._v("使用浏览器提供的SRI（Subresource Integrity）功能。每个资源文件都有一个SRI值。由两部分组成，减号（-）左侧是生成SRI值用到的哈希算法名，右侧是经过Base64编码后的该资源文件的Hash值。浏览器在处理这个script元素的时候，就会检查对应的JS脚本文件的完整性，看其是否和script元素中integrity属性指定的SRI值一致，如果不匹配，浏览器则会中止对这个JS脚本的处理。")])])])]),_._v(" "),l("h3",{attrs:{id:"_7-7-错误监控、性能采集、用户信息收集"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_7-7-错误监控、性能采集、用户信息收集"}},[_._v("#")]),_._v(" 7.7 错误监控、性能采集、用户信息收集")]),_._v(" "),l("ul",[l("li",[_._v("前端错误分类\n"),l("ul",[l("li",[_._v("即时运行错误：代码错误\n"),l("ul",[l("li",[_._v("捕获方式：\n"),l("ul",[l("li",[l("code",[_._v("try..catch")])]),_._v(" "),l("li",[l("code",[_._v("window.onerror")]),_._v(" 捕捉 js 错误")]),_._v(" "),l("li",[l("code",[_._v("addEventListener('unhandledrejection', callback)")]),_._v(" 捕捉 promise 错误，但是没有发生错误的行数，列数等信息，只能手动抛出相关错误信息。")])])])])]),_._v(" "),l("li",[_._v("资源加载错误\n"),l("ul",[l("li",[_._v("捕获方式：\n"),l("ul",[l("li",[l("code",[_._v("object.onerror")])]),_._v(" "),l("li",[l("code",[_._v("performance.getEntries()")]),_._v(" 成功加载资源的集合")]),_._v(" "),l("li",[l("code",[_._v("window.addEventListener('error',function(){},true)")]),_._v(" 在捕获阶段捕捉资源加载失败错误")])])])])])])]),_._v(" "),l("li",[_._v("上报错误基本原理\n"),l("ul",[l("li",[_._v("利用 Ajax 上报(尽量不要影响性能)。")]),_._v(" "),l("li",[_._v("利用 Image 对象上报。 "),l("code",[_._v("(new Image()).src = 'http://baidu.com/test?123';")])])])]),_._v(" "),l("li",[_._v("性能采集\n"),l("ul",[l("li",[l("code",[_._v("window.performance")]),_._v(" 可以通过一些计算，获取相应的关键耗时\n"),l("ul",[l("li",[_._v("// 重定向耗时")]),_._v(" "),l("li",[_._v("redirect: timing.redirectEnd - timing.redirectStart,")]),_._v(" "),l("li",[_._v("// 白屏时间")]),_._v(" "),l("li",[_._v("whiteScreen: timing.responseStart - timing.navigationStart,")]),_._v(" "),l("li",[_._v("// DOM 渲染耗时")]),_._v(" "),l("li",[_._v("dom: timing.domComplete - timing.domLoading,")]),_._v(" "),l("li",[_._v("// 页面加载耗时")]),_._v(" "),l("li",[_._v("load: timing.loadEventEnd - timing.navigationStart,")]),_._v(" "),l("li",[_._v("// 页面卸载耗时")]),_._v(" "),l("li",[_._v("unload: timing.unloadEventEnd - timing.unloadEventStart,")]),_._v(" "),l("li",[_._v("// 请求耗时")]),_._v(" "),l("li",[_._v("request: timing.responseEnd - timing.requestStart,")])])]),_._v(" "),l("li",[l("code",[_._v("window.performance.getEntriesByType('resource')")]),_._v("这个方法，我们还可以获取相关资源（js、css、img...）的加载时间，它会返回页面当前所加载的所有资源。\n"),l("ul",[l("li",[_._v("// 资源的名称")]),_._v(" "),l("li",[_._v("name: item.name,")]),_._v(" "),l("li",[_._v("// 资源加载耗时")]),_._v(" "),l("li",[_._v("duration: item.duration.toFixed(2),")]),_._v(" "),l("li",[_._v("// 资源大小")]),_._v(" "),l("li",[_._v("size: item.transferSize,")]),_._v(" "),l("li",[_._v("// 资源所用协议")]),_._v(" "),l("li",[_._v("protocol: item.nextHopProtocol,")])])]),_._v(" "),l("li",[l("code",[_._v("window.performance")]),_._v(" API 是有缺点的，在 SPA 切换路由时，window.performance.timing 的数据不会更新。所以我们需要另想办法来统计切换路由到加载完成的时间。拿 Vue 举例，一个可行的办法就是切换路由时，在组件的 beforeCreate 钩子里执行 vm.$nextTick 函数来获取切换路由时组件的完全渲染时间。")])])])]),_._v(" "),l("ul",[l("li",[_._v("用户信息收集\n"),l("ul",[l("li",[l("code",[_._v("window.navigator")]),_._v(" 收集到用户的设备信息，操作系统，浏览器信息")]),_._v(" "),l("li",[_._v("UV（Unique visitor）：指通过互联网访问、浏览这个网页的自然人，一天内同个访客多次访问仅计算一个UV。")]),_._v(" "),l("li",[_._v("PV（Page View）：页面浏览量或点击量，每1次对网站中的每个网页访问均被记录1个PV。")]),_._v(" "),l("li",[_._v("页面停留时间")]),_._v(" "),l("li",[_._v("浏览深度：document.documentElement.scrollTop 属性以及屏幕高度，可以判断用户是否浏览完网站内容。")]),_._v(" "),l("li",[_._v("页面跳转来源：通过 document.referrer 属性，可以知道用户是从哪个网站跳转而来")])])])]),_._v(" "),l("h3",{attrs:{id:"_7-8-项目设计"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_7-8-项目设计"}},[_._v("#")]),_._v(" 7.8 项目设计")]),_._v(" "),l("ul",[l("li",[_._v("css 模块化\n"),l("ul",[l("li",[_._v("设计原则\n"),l("ul",[l("li",[_._v("可复用能继承要完整")]),_._v(" "),l("li",[_._v("周期性迭代")])])]),_._v(" "),l("li",[_._v("设计方法\n"),l("ul",[l("li",[_._v("先整体后部分再颗粒化：布局、页面、功能、业务")]),_._v(" "),l("li",[_._v("先抽象再具体")]),_._v(" "),l("li",[_._v("实践\n"),l("ul",[l("li",[_._v("reset.scss")]),_._v(" "),l("li",[_._v("layout.scss")]),_._v(" "),l("li",[_._v("element.scss")]),_._v(" "),l("li",[_._v("具体页面 "),l("code",[_._v("<style>")]),_._v(" "),l("ul",[l("li",[_._v("global")]),_._v(" "),l("li",[_._v("scope: module 或者 scoped")])])])])])])])])]),_._v(" "),l("li",[_._v("js 组件设计\n"),l("ul",[l("li",[_._v("设计原则\n"),l("ul",[l("li",[_._v("高内聚低耦合")]),_._v(" "),l("li",[_._v("周期性迭代")])])]),_._v(" "),l("li",[_._v("设计方法\n"),l("ul",[l("li",[_._v("先整体后部分再颗粒化")]),_._v(" "),l("li",[_._v("尽可能的抽象")]),_._v(" "),l("li",[_._v("先具体到抽象，再抽象到具体")])])])])]),_._v(" "),l("li",[_._v("SPA 设计\n"),l("ul",[l("li",[_._v("设计意义\n"),l("ul",[l("li",[_._v("前后端分离")]),_._v(" "),l("li",[_._v("减轻服务器压力")]),_._v(" "),l("li",[_._v("增强用户体验")]),_._v(" "),l("li",[_._v("缺点：SEO 不友好，"),l("a",{attrs:{href:"http://codingfishman.github.io/2016/05/06/prerender%E9%A2%84%E6%B8%B2%E6%9F%93%E4%BC%98%E5%8C%96SEO/",target:"_blank",rel:"noopener noreferrer"}},[_._v("使用 Prerender 预渲染优化 SEO"),l("OutboundLink")],1)])])]),_._v(" "),l("li",[_._v("工作原理\n"),l("ul",[l("li",[_._v("History API\n"),l("ul",[l("li",[_._v("优雅，但是对浏览器有要求")]),_._v(" "),l("li",[l("code",[_._v("history.pushState")])]),_._v(" "),l("li",[l("code",[_._v("popstate")]),_._v(" 监听事件")])])]),_._v(" "),l("li",[_._v("Hash\n"),l("ul",[l("li",[_._v("不够优雅，兼容性更好")]),_._v(" "),l("li",[l("code",[_._v("location.hash")])]),_._v(" "),l("li",[l("code",[_._v("hanschange")]),_._v(" 监听事件")])])])])])])]),_._v(" "),l("li",[_._v("构建设计")]),_._v(" "),l("li",[_._v("上线指导")])]),_._v(" "),l("h3",{attrs:{id:"_7-9-event-loop"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_7-9-event-loop"}},[_._v("#")]),_._v(" 7.9 Event Loop")]),_._v(" "),l("ul",[l("li",[_._v("js 是单线程语言")]),_._v(" "),l("li",[_._v("Event Loop 是 js 的执行机制, 也就是事件循环")]),_._v(" "),l("li",[_._v("js 将任务分为同步任务和异步任务，执行机制就是先执行同步任务，将同步任务加入到主线程，遇到异步任务就先加入到 "),l("code",[_._v("event table")]),_._v(" ，当所有的同步任务执行完毕，如果有可执行的异步任务，再将其加入到主线程中执行")]),_._v(" "),l("li",[_._v("在异步任务中，定时器也属于特殊的存在。有人将其称之为 宏任务、微任务，定时器就属于宏任务的范畴。")])]),_._v(" "),l("h3",{attrs:{id:"_7-10-oauth"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_7-10-oauth"}},[_._v("#")]),_._v(" 7.10 OAuth")]),_._v(" "),l("ul",[l("li",[_._v("OAuth 引入了一个授权层，用来分离两种不同的角色：客户端和资源所有者。资源所有者同意以后，资源服务器可以向客户端颁发令牌。客户端通过令牌，去请求数据。OAuth 的核心就是向第三方应用颁发令牌。")]),_._v(" "),l("li",[_._v("不管哪一种授权方式，第三方应用申请令牌之前，都必须先到系统备案，说明自己的身份，然后会拿到两个身份识别码：客户端 ID（client ID）和客户端密钥（client secret）。")]),_._v(" "),l("li",[_._v("本标准定义了获得令牌的四种授权方式\n"),l("ul",[l("li",[_._v("授权码（authorization-code）\n"),l("ul",[l("li",[_._v("最常用的流程，安全性也最高")]),_._v(" "),l("li",[_._v("第三方应用先申请一个授权码，然后再用该码获取令牌")]),_._v(" "),l("li",[_._v("适用于那些有后端的 Web 应用。授权码通过前端传送，令牌则是储存在后端，而且所有与资源服务器的通信都在后端完成。这样的前后端分离，可以避免令牌泄漏。")])])]),_._v(" "),l("li",[_._v("隐藏式（implicit）\n"),l("ul",[l("li",[_._v("有些 Web 应用是纯前端应用，没有后端。这时就不能用上面的方式了，必须将令牌储存在前端。")]),_._v(" "),l("li",[_._v("这种方式把令牌直接传给前端，是很不安全的。因此，只能用于一些安全要求不高的场景，并且令牌的有效期必须非常短，通常就是会话期间（session）有效，浏览器关掉，令牌就失效了。")])])]),_._v(" "),l("li",[_._v("密码式（password）\n"),l("ul",[l("li",[_._v("如果你高度信任某个应用，也允许用户把用户名和密码，直接告诉该应用。该应用就使用你的密码，申请令牌。")])])]),_._v(" "),l("li",[_._v("客户端凭证（client credentials）\n"),l("ul",[l("li",[_._v("适用于没有前端的命令行应用，即在命令行下请求令牌。")]),_._v(" "),l("li",[_._v("这种方式给出的令牌，是针对第三方应用的，而不是针对用户的，即有可能多个用户共享同一个令牌。")])])])])]),_._v(" "),l("li",[_._v("令牌的使用\n"),l("ul",[l("li",[_._v("A 网站拿到令牌以后，就可以向 B 网站的 API 请求数据了。每个发到 API 的请求，都必须带有令牌")])])]),_._v(" "),l("li",[_._v("更新令牌\n"),l("ul",[l("li",[_._v("令牌的有效期到了，如果让用户重新走一遍上面的流程，再申请一个新的令牌，很可能体验不好，而且也没有必要")]),_._v(" "),l("li",[_._v("OAuth 2.0 允许用户自动更新令牌： B 网站颁发令牌的时候，一次性颁发两个令牌，一个用于获取数据，另一个用于获取新的令牌（refresh token 字段）。令牌到期前，用户使用 refresh token 发一个请求，去更新令牌。")])])])]),_._v(" "),l("h3",{attrs:{id:"_7-11-htpp2"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_7-11-htpp2"}},[_._v("#")]),_._v(" 7.11 HTPP2")]),_._v(" "),l("ul",[l("li",[_._v("HTTP1 一些问题\n"),l("ul",[l("li",[_._v("TCP 连接数过多，HTTP1.0只允许一条 tcp 链接上处理一个 request，尽管后来的 HTTP1.1(现在常用的版本）允许pipelining， 管道，通过这个管道，浏览器的多个请求可以同时发到服务器，但是服务器的响应只能够一个接着一个的返回。浏览器客户端在同一时间，针对同一域名下的请求有一定数量限制。超过限制数目的请求会被阻塞,这也是为何一些站点会有多个静态资源 CDN 域名的原因之一。")]),_._v(" "),l("li",[_._v("HTTP 头部过多重复")]),_._v(" "),l("li",[_._v("使用文本协议")])])]),_._v(" "),l("li",[_._v("HTPP2 主要变化\n"),l("ul",[l("li",[_._v("高效压缩头部（http header）")]),_._v(" "),l("li",[_._v("二进制协议")]),_._v(" "),l("li",[_._v("多路复用：允许多个 request/response在同一个 tcp 链接上发送")]),_._v(" "),l("li",[_._v("还有自己的流量控制，保证各个 stream不被互相干扰；")]),_._v(" "),l("li",[_._v("支持请求分优先级发送，优先级越高如核心 css、html，优先发给客户端")]),_._v(" "),l("li",[_._v("支持服务器预测并推送客户端可能需要的资源，让客户端先做缓存（server push），榨干服务器")]),_._v(" "),l("li",[_._v("更安全的SSL")])])]),_._v(" "),l("li",[_._v("升级 HTTP2\n"),l("ul",[l("li",[_._v("openssl 1.0.2 ，Nginx 1.9.5+")]),_._v(" "),l("li",[_._v("域名就必须是 https")]),_._v(" "),l("li",[_._v("nginx 开启 HPPT/2 非常简单，只需在 HTTPS 设置后加上 http2 即可")])])])]),_._v(" "),l("h3",{attrs:{id:"_7-12-seo-优化"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_7-12-seo-优化"}},[_._v("#")]),_._v(" 7.12 SEO 优化")]),_._v(" "),l("ul",[l("li",[_._v("meta 描述：\n"),l("ul",[l("li",[_._v('< meta name="keywords" content="关键词1，关键词2" />')]),_._v(" "),l("li",[_._v('< meta name="description" content="描述1，描述2" />')])])]),_._v(" "),l("li",[_._v("优化 html 标签\n"),l("ul",[l("li",[_._v("多使用 H5 的语义化标签")]),_._v(" "),l("li",[_._v("HTML5 Outliner")])])]),_._v(" "),l("li",[_._v("图片 "),l("code",[_._v("<img />")]),_._v(" 添加 alt 属性")]),_._v(" "),l("li",[_._v("多使用 svg 图片，svg 图像的源文件是一个文本文件，有利于访问")]),_._v(" "),l("li",[_._v("导航栏的层级数不宜太深")]),_._v(" "),l("li",[_._v("页面跳转，尽量使用 "),l("code",[_._v('<a href="#"></a>')]),_._v(", 不使用 js 跳转")]),_._v(" "),l("li",[_._v("单页应用 SEO 优化\n"),l("ul",[l("li",[_._v("SSR:Nuxt.js (asyncData服务端获取数据return注入；nuxtServerInit服务端货物数据，提前设置store)")]),_._v(" "),l("li",[_._v("nginx拦 截网络爬虫转发请求到 node 服务器，预渲染出请求页面，返回渲染好的 html。")])])])]),_._v(" "),l("h3",{attrs:{id:"_7-13-mvc-mvp-mvvm"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_7-13-mvc-mvp-mvvm"}},[_._v("#")]),_._v(" 7.13 MVC MVP MVVM")]),_._v(" "),l("p",[_._v("MVC，MVP和MVVM都是常见的软件架构设计模式（Architectural Pattern），它通过分离关注点来改进代码的组织方式。不同于设计模式（Design Pattern），只是为了解决一类问题而总结出的抽象方法，一种架构模式往往使用了多种设计模式。")]),_._v(" "),l("ul",[l("li",[_._v("MCV：Model-View-Controller\n"),l("ul",[l("li",[_._v("用户对View的操作交给了Controller处理，在Controller中响应View的事件调用Model的接口对数据进行操作，一旦Model发生变化便通知相关视图进行更新。")]),_._v(" "),l("li",[_._v("MVC模式的业务逻辑主要集中在Controller，而前端的View其实已经具备了独立处理用户事件的能力，当每个事件都流经Controller时，这层会变得十分臃肿。")]),_._v(" "),l("li",[_._v("而且MVC中View和 Controller 一般是一一对应的，捆绑起来表示一个组件，视图与控制器间的过于紧密的连接让 Controller的复用性成了问题。")]),_._v(" "),l("li",[l("img",{attrs:{src:e(251),alt:"MVC"}})])])]),_._v(" "),l("li",[_._v("MVP：Model-View-Presenter\n"),l("ul",[l("li",[_._v("MVP中的View并不能直接使用Model，而是通过为Presenter提供接口，让Presenter去更新Model，再通过观察者模式更新View。")]),_._v(" "),l("li",[_._v("MVP模式通过解耦View和Model，完全分离视图和模型使职责划分更加清晰；由于View不依赖Model，可以将View抽离出来做成组件，它只需要提供一系列接口提供给上层操作。")]),_._v(" "),l("li",[_._v("Presenter作为View和Model之间的“中间人”，除了基本的业务逻辑外，还有大量代码需要对从View到Model和从Model到View的数据进行“手动同步”，这样Presenter显得很重，维护起来会比较困难。")]),_._v(" "),l("li",[_._v("Presenter对视图渲染的需求增多，它不得不过多关注特定的视图，一旦视图需求发生改变，Presenter也需要改动。")]),_._v(" "),l("li",[l("img",{attrs:{src:e(252),alt:"MVP"}})])])]),_._v(" "),l("li",[_._v("MVVM：Model-View-ViewModel\n"),l("ul",[l("li",[_._v("MVVM把View和Model的同步逻辑自动化了。以前Presenter负责的View和Model同步不再手动地进行操作，而是交给框架所提供的数据绑定功能进行负责，只需要告诉它View显示的数据对应的是Model哪一部分即可。")]),_._v(" "),l("li",[_._v("比MVC/MVP精简了很多，不仅仅简化了业务与界面的依赖，还解决了数据频繁更新的问题。因为在MVVM中，View不知道Model的存在，ViewModel和Model也察觉不到View，这种低耦合模式可以使开发过程更加容易，提高应用的可重用性。")]),_._v(" "),l("li",[l("img",{attrs:{src:e(253),alt:"MVVM"}})])])]),_._v(" "),l("li",[_._v("双向数据绑定\n"),l("ul",[l("li",[_._v("数据劫持+观察者模式 (Vue)")]),_._v(" "),l("li",[_._v("发布-订阅模式 (Knockout、Backbone)")]),_._v(" "),l("li",[_._v("脏值检查 (Angular)")])])])]),_._v(" "),l("h3",{attrs:{id:"_7-14-flutter、rn、uni-app-weex"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_7-14-flutter、rn、uni-app-weex"}},[_._v("#")]),_._v(" 7.14 flutter、rn、uni-app(weex)")]),_._v(" "),l("ul",[l("li",[_._v("React Native\n"),l("ul",[l("li",[_._v("概述\n"),l("ul",[l("li",[_._v("Facebook 出品，JavaScript语言，JSCore引擎，React设计模式，原生渲染")]),_._v(" "),l("li",[_._v("react native 用了 react 的设计模式，但UI渲染、动画效果、网络请求等均由原生端实现。开发者编写的js代码，通过 react native 的中间层转化为原生控件和操作，大大提高了的用户体验。")])])]),_._v(" "),l("li",[_._v("原理\n"),l("ul",[l("li",[_._v("跨平台是实现主要由三层构成\n"),l("ul",[l("li",[_._v("其中 C++ 实现的动态连结库(.so)，作为中间适配层桥接，实现了js端与原生端的双向通信交互。这里最主要是封装了 JavaScriptCore 执行js的解析，而 react native 运行在JavaScriptCore中，所以不存在浏览器兼容的问题。")]),_._v(" "),l("li",[_._v("在IOS上直接使用内置的javascriptcore， 在Android 则使用webkit.org官方开源的jsc.so。")])])]),_._v(" "),l("li",[_._v("react native 所有的标签都不是真实控件，JS代码中所写控件的作用，类似 Map 中的 key 值。JS端通过这个 key 组合的 Dom ，最后Native端会解析这个 Dom ，得到对应的Native控件渲染")]),_._v(" "),l("li",[_._v("在 react native 中，JS端是运行在独立的线程中（称为JS Thread ），而跨线程通信，也意味着 Js Thread 和原生之间交互与通讯是异步的。")]),_._v(" "),l("li",[_._v("原生端提供的各种 Native Module 模块和JS 端提供的各种 JS Module都会在C++实现的so中保存起来，双方的通讯通过C++中的保存的映射，最终实现两端的交互。通信的数据和指令，在中间层会被转为String字符串传输。")])])])])]),_._v(" "),l("li",[_._v("WEEX\n"),l("ul",[l("li",[_._v("概述\n"),l("ul",[l("li",[_._v("Alibaba 出品，JavaScript语言，JS V8引擎，Vue设计模式，原生渲染")]),_._v(" "),l("li",[_._v("基于 Vue 设计模式，支持 web、android、ios 三端，原生端同样通过中间层转化，将控件和操作转化为原生逻辑来提高用户体验。")])])]),_._v(" "),l("li",[_._v("原理\n"),l("ul",[l("li",[_._v("三大部分：\n"),l("ul",[l("li",[_._v("JS Bridge、Render、Dom，分别对应WXBridgeManager、WXRenderManager、WXDomManager，三部分通过WXSDKManager统一管理。其中 JS Bridge 和 Dom 都运行在独立的 HandlerThread 中，而 Render 运行在 UI 线程。")]),_._v(" "),l("li",[_._v("JS Bridge 主要用来和 JS 端实现进行双向通信，比如把 JS 端的 dom 结构传递给 Dom 线程。Dom 主要是用于负责 dom 的解析、映射、添加等等的操作，最后通知UI线程更新。而 Render 负责在UI线程中对 dom 实现渲染。")])])]),_._v(" "),l("li",[_._v("和 react native一样，weex 所有的标签也不是真实控件，JS 代码中所生成存的 dom，最后都是由 Native 端解析，再得到对应的Native控件渲染。")]),_._v(" "),l("li",[_._v("Weex SDK会负责加载渲染这个js文件。Weex可以做到跨三端的原理在于：在开发过程中，代码模式、编译过程、模板组件、数据绑定、生命周期等上层语法是一致的。不同的是在 JS Framework 层的最后，web 平台和 Native 平台，对 Virtual DOM 执行的解析方法是有区别的。")]),_._v(" "),l("li",[_._v("weex 比起react native，主要是在JS V8的引擎上，多了 JS Framework 承当了重要的职责，使得上层具备统一性，可以支持跨三个平台。总的来说它主要负责是：管理Weex的生命周期；解析JS Bundle，转为Virtual DOM，再通过所在平台不同的API方法，构建页面；进行双向的数据交互和响应。")])])])])]),_._v(" "),l("li",[_._v("Flutter\n"),l("ul",[l("li",[_._v("概述\n"),l("ul",[l("li",[_._v("Google 出品，Dart语言，Flutter Engine引擎，响应式设计模式，原生渲染")])])]),_._v(" "),l("li",[_._v("原理\n"),l("ul",[l("li",[_._v("Flutter 主要分为 Framework 和 Engine，我们基于Framework 开发App，运行在 Engine 上。Engine 是 Flutter 的独立虚拟机，由它适配和提供跨平台支持。")]),_._v(" "),l("li",[_._v("得益于 Engine 层，Flutter 甚至不使用移动平台的原生控件， 而是使用自己  Engine 来绘制 Widget （Flutter的显示单元），而 Dart 代码都是通过 AOT 编译为平台的原生代码，所以 Flutter 可以 直接与平台通信，不需要JS引擎的桥接。同时 Flutter 唯一要求系统提供的是 canvas，以实现UI的绘制。")])])])])])]),_._v(" "),l("h3",{attrs:{id:"_7-15-saas"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_7-15-saas"}},[_._v("#")]),_._v(" 7.15 SaaS")]),_._v(" "),l("ul",[l("li",[_._v("Software-as-a-Service，软件即服务的简称，是一种通过互联网提供软件的模式，厂商将应用软件统一部署在自己的服务器上，客户可以根据实际需求，通过互联网向厂商定购所需的应用软件服务，按定购的服务多少和时间长短向厂商支付费用，并通过互联网获得厂商提供的服务。")]),_._v(" "),l("li",[_._v("优势：提高效率，节省成本\n"),l("ul",[l("li",[_._v("从技术方面来看：SaaS是部署，不需要购买任何硬件，刚开始只需要简单注册即可。企业无需再配备IT方面的专业技术人员，同时又能得到最新的技术应用，满足企业对信息管理的需求。")]),_._v(" "),l("li",[_._v("从投资方面来看：企业只以相对低廉的方式投资，不用一次性投资到位，不占用过多的营运资金，从而缓解企业资金不足的压力；不用考虑成本折旧问题，并能及时获得最新硬件平台及最佳解决方案。")]),_._v(" "),l("li",[_._v("从维护和管理方面来看：由于企业采取租用的方式来进行物流业务管理，不需要专门的维护和管理人员，也不需要为维护和管理人员支付额外费用。很大程度上缓解企业在人力、财力上的压力，使其能够集中资金对核心业务进行有效的运营；SaaS能使用户在世界上都是一个完全独立的系统。如果您连接到网络，就可以访问系统。")])])]),_._v(" "),l("li",[_._v("挑战\n"),l("ul",[l("li",[_._v("满足企业个性化需求：同一款软件可以满足几百万，甚至上千万的个人用户使用，但对于企业来说，从 UI 到具体功能实现都需要个性化订制，toC 和 toB 市场的差异，导致 SaaS 公司除非增加大量开发成本，否则难以满足大型企业的个性化需求")]),_._v(" "),l("li",[_._v("产品安全和稳定：对于 SaaS 产品来说，一次安全问题就足以造成毁灭性的打击，随着客户的增加和，软件的安全维护成本会指数级上升。如何在业务不断增长的同时，维护好用户的信息安全，也是每个 SaaS 公司所面临的最大挑战")])])]),_._v(" "),l("li",[_._v("改变现状\n"),l("ul",[l("li",[_._v("针对企业内部的管理软件，如果要SAAS化，要从细分市场入手，分析市场，选择一个有充足市场容量的细分市场，然后在此深耕")]),_._v(" "),l("li",[_._v("在国内中小企业市场，不要指望卖软件能够赚钱，数据增值也不靠谱，要通过软件卖服务，卖咨询，卖整体解决方案。国内中小企业有时候需求并不是一套软件能够解决的，需要的是一系列的改变。而中小企业的老板们好像也特别倾向于服务商能给出一套整体解决方案。所以需要软件公司需要和上下游打通，和行业相关的咨询公司，硬件公司通力合作，以软件为载体，通过咨询，服务，整体解决方案来赚钱。")])])]),_._v(" "),l("li",[_._v("IaaS，PaaS，SaaS（例子：上网）\n"),l("ul",[l("li",[_._v("IaaS：基础设施及服务-组装机，你买了一大堆电脑配件(不用自己生产原始材料),然后组装完成后，装上系统就可以上网。还要自己提供场地、环境。")]),_._v(" "),l("li",[_._v("PaaS：平台即服务-品牌机，买回来开机就行。需要自己提供场地、环境（电源）。")]),_._v(" "),l("li",[_._v("SaaS：软件即服务-去网吧，电脑，场地，环境（电源，网线）都是网吧提供的服务。你只需要按时付费，给你一个账号，就能使用服务。")])])]),_._v(" "),l("li",[_._v("SCRM、CRM、ERP、OA\n"),l("ul",[l("li",[_._v("ERP(Enterprise Resource Planning)：企业资源计划软件。企业资源计划是指建立在现代发达的信息技术基础上，用系统化的管理思想为企业管理层及员工提供决策运行手段的平台，是针对企业物流（企业物资方面）、人流（人力资源方面）、财流（财务方面）、信息流（信息资源方面）集成一体化的企业管理软件。")]),_._v(" "),l("li",[_._v("OA(Office Automation)：办公自动化")]),_._v(" "),l("li",[_._v("CRM(Customer Relationship Management)：一般讲的是企业内部对客户进行的分析，画像储存，侧重企业单向发起行为，客户只是一条数据而已，没有任何能动性。大多以单向传播的形式，通过到达率和转化率相对低效的渠道，进行信息传递，以实现对客户生命周期的管理。")]),_._v(" "),l("li",[_._v("SCRM(Social-CRM)：是社会化客户关系管理系统，侧重企业与客户之间双向的触达，互动，回应，从流量红利中将潜在用户转变成用户。SCRM要跟外界的social media打通，social media的大力发展，将消费者变成了social customer，SCRM内部的信息（例如企业发布的信息）要非常方便地传达到外界social media去，外界social media的信息（例如一个明确的产品需求线索）也要快速地进入SCRM，让品牌和消费者的交流、对话简单、通畅。")]),_._v(" "),l("li",[_._v("Sass 级的 SCRM：意味着一个顺应社交、移动、大数据等互联网潮流的客户管理模式。")])])])])])}),[],!1,null,null,null);v.default=i.exports}}]);