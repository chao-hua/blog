(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{326:function(_,e,v){"use strict";v.r(e);var t=v(1),a=Object(t.a)({},(function(){var _=this,e=_.$createElement,v=_._self._c||e;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("h1",{attrs:{id:"跨域"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#跨域"}},[_._v("#")]),_._v(" 跨域")]),_._v(" "),v("p"),v("div",{staticClass:"table-of-contents"},[v("ul",[v("li",[v("a",{attrs:{href:"#_1-跨域概念"}},[_._v("1.跨域概念")]),v("ul",[v("li",[v("a",{attrs:{href:"#_1-1-浏览器对非同源的-js-脚本有-3-种行为受到限制："}},[_._v("1.1 浏览器对非同源的 JS 脚本有 3 种行为受到限制：")])]),v("li",[v("a",{attrs:{href:"#_1-2-浏览器允许跨域加载-3-种资源"}},[_._v("1.2 浏览器允许跨域加载 3 种资源")])]),v("li",[v("a",{attrs:{href:"#_1-3-允许跨域加载-3-种资源的应用"}},[_._v("1.3 允许跨域加载 3 种资源的应用")])])])]),v("li",[v("a",{attrs:{href:"#_2-通信跨域的解决方案对比"}},[_._v("2.通信跨域的解决方案对比")]),v("ul",[v("li",[v("a",{attrs:{href:"#_2-1-通过-hash-（-）"}},[_._v("2.1 通过 hash（#）")])]),v("li",[v("a",{attrs:{href:"#_2-2-window-name"}},[_._v("2.2 window.name")])]),v("li",[v("a",{attrs:{href:"#_2-3-postmessage"}},[_._v("2.3 postMessage")])])])]),v("li",[v("a",{attrs:{href:"#_3-ajax-跨域的解决方案对比"}},[_._v("3.AJAX 跨域的解决方案对比")]),v("ul",[v("li",[v("a",{attrs:{href:"#_3-1-jsonp"}},[_._v("3.1 JSONP")])]),v("li",[v("a",{attrs:{href:"#_3-2-websocket"}},[_._v("3.2 WebSocket")])]),v("li",[v("a",{attrs:{href:"#_3-3-cors"}},[_._v("3.3 CORS")])]),v("li",[v("a",{attrs:{href:"#_3-4-反向代理"}},[_._v("3.4 反向代理")])])])])])]),v("p"),_._v(" "),v("h2",{attrs:{id:"_1-跨域概念"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-跨域概念"}},[_._v("#")]),_._v(" 1.跨域概念")]),_._v(" "),v("p",[_._v("同源策略（same origin policy）：是浏览器核心的安全功能，所谓同源是指：协议、域名、端口三者全部相同。")]),_._v(" "),v("h3",{attrs:{id:"_1-1-浏览器对非同源的-js-脚本有-3-种行为受到限制："}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-浏览器对非同源的-js-脚本有-3-种行为受到限制："}},[_._v("#")]),_._v(" 1.1 浏览器对非同源的 JS 脚本有 3 种行为受到限制：")]),_._v(" "),v("ul",[v("li",[_._v("Cookie、LocalStorage、SessionStorage 和 IndexDB 无法读取")]),_._v(" "),v("li",[_._v("DOM 无法获得")]),_._v(" "),v("li",[_._v("AJAX 请求不能发送")])]),_._v(" "),v("h3",{attrs:{id:"_1-2-浏览器允许跨域加载-3-种资源"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-浏览器允许跨域加载-3-种资源"}},[_._v("#")]),_._v(" 1.2 浏览器允许跨域加载 3 种资源")]),_._v(" "),v("ul",[v("li",[v("code",[_._v('<img src="">')])]),_._v(" "),v("li",[v("code",[_._v('<script src="">')])]),_._v(" "),v("li",[v("code",[_._v('<link href="">')])])]),_._v(" "),v("h3",{attrs:{id:"_1-3-允许跨域加载-3-种资源的应用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-允许跨域加载-3-种资源的应用"}},[_._v("#")]),_._v(" 1.3 允许跨域加载 3 种资源的应用")]),_._v(" "),v("ul",[v("li",[v("code",[_._v("<img>")]),_._v(" 用于打点统计，统计网站可以是其他域。")]),_._v(" "),v("li",[v("code",[_._v("<script>")]),_._v("、"),v("code",[_._v("<link>")]),_._v(" 可以使用 CDN。")]),_._v(" "),v("li",[v("code",[_._v("<script>")]),_._v(" 可以用于 "),v("code",[_._v("JSONP")]),_._v(" 请求。")])]),_._v(" "),v("h2",{attrs:{id:"_2-通信跨域的解决方案对比"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-通信跨域的解决方案对比"}},[_._v("#")]),_._v(" 2.通信跨域的解决方案对比")]),_._v(" "),v("p",[_._v("所谓的通信的跨域，主要指受同源限制的前两点。对于完全不同源的网站，目前有三种方法，可以解决跨域窗口的通信问题：")]),_._v(" "),v("h3",{attrs:{id:"_2-1-通过-hash（-）"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-通过-hash（-）"}},[_._v("#")]),_._v(" 2.1 通过 "),v("code",[_._v("hash")]),_._v("（"),v("code",[_._v("#")]),_._v("）")]),_._v(" "),v("p",[_._v("片段识别符（fragment identifier），当前页面 A 通过 iframe 或 frame 嵌入跨域的页面 B，B 中通过 "),v("code",[_._v("window.onhashchange")]),_._v("来处理。")]),_._v(" "),v("h3",{attrs:{id:"_2-2-window-name"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-window-name"}},[_._v("#")]),_._v(" 2.2 "),v("code",[_._v("window.name")])]),_._v(" "),v("p",[_._v("览器窗口有 "),v("code",[_._v("window.name")]),_._v(" 属性。这个属性的最大特点是，无论是否同源，只要在同一个窗口里，前一个网页设置了这个属性，后一个网页可以读取它。")]),_._v(" "),v("h3",{attrs:{id:"_2-3-postmessage"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-postmessage"}},[_._v("#")]),_._v(" 2.3 "),v("code",[_._v("postMessage")])]),_._v(" "),v("p",[_._v("上面两种方法都属于破解，HTML5 为了解决这个问题，引入了一个全新的 API：跨文档通信 API（Cross-document messaging）。窗口 A 向跨域的窗口 B 发送信息："),v("code",[_._v("Bwindow.postMessage(data,url)")]),_._v("，在 B 窗口中监听 "),v("code",[_._v("window.addEventListener('message',function(e){})")]),_._v("。")]),_._v(" "),v("h2",{attrs:{id:"_3-ajax-跨域的解决方案对比"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-ajax-跨域的解决方案对比"}},[_._v("#")]),_._v(" 3.AJAX 跨域的解决方案对比")]),_._v(" "),v("h3",{attrs:{id:"_3-1-jsonp"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-jsonp"}},[_._v("#")]),_._v(" 3.1 JSONP")]),_._v(" "),v("ul",[v("li",[_._v("优点：\n"),v("ul",[v("li",[_._v("兼容性好，老浏览器全部支持")]),_._v(" "),v("li",[_._v("服务器改动较小")])])]),_._v(" "),v("li",[_._v("缺点：\n"),v("ul",[v("li",[_._v("只能发送 get 请求")]),_._v(" "),v("li",[_._v("没有浏览器的请求状态")])])]),_._v(" "),v("li",[_._v("原理：\n"),v("ul",[v("li",[_._v("利用 "),v("code",[_._v("<script>")]),_._v(" 元素不受同源策略的限制。网页通过动态添加一个 "),v("code",[_._v("<script>")]),_._v(" 元素，向服务器请求 JSON 数据，服务器收到请求后，将数据放在一个指定名字的回调函数里传回来。")]),_._v(" "),v("li",[_._v("加载 "),v("code",[_._v('<script src="http://test/api.js">')]),_._v(" 时，服务器不一定真正有一个 api.js 文件，服务器可以根据请求，动态生成一个文件返回。")]),_._v(" "),v("li",[v("code",[_._v("<script> window.callback = function(data) { console.log(data) } <\/script>")])]),_._v(" "),v("li",[v("code",[_._v('<script src="http://test/api.js"><\/script>')]),_._v(" 服务器返回 "),v("code",[_._v("callback({x:1, y:2})")])])])])]),_._v(" "),v("h3",{attrs:{id:"_3-2-websocket"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-websocket"}},[_._v("#")]),_._v(" 3.2 WebSocket")]),_._v(" "),v("ul",[v("li",[_._v("优点：双向通讯")]),_._v(" "),v("li",[_._v("缺点：使用全新通讯协议，前后端改动巨大")]),_._v(" "),v("li",[_._v("原理：\n"),v("ul",[v("li",[_._v("WebSocket 是一种通信协议，使用 "),v("code",[_._v("ws://")]),_._v("（非加密）和 "),v("code",[_._v("wss://")]),_._v("（加密）作为协议前缀。该协议不实行同源政策，只要服务器支持，就可以通过它进行跨源通信。")]),_._v(" "),v("li",[v("code",[_._v("new WebSocket('ws://')")]),_._v(" "),v("code",[_._v("send")]),_._v(" "),v("code",[_._v("onopen")]),_._v(" "),v("code",[_._v("onmessage")]),_._v(" "),v("code",[_._v("onclose")])])])])]),_._v(" "),v("h3",{attrs:{id:"_3-3-cors"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-cors"}},[_._v("#")]),_._v(" 3.3 CORS")]),_._v(" "),v("ul",[v("li",[_._v("CORS是跨源资源分享（Cross-Origin Resource Sharing）的缩写。它是W3C标准，是跨源AJAX请求的根本解决方法。")]),_._v(" "),v("li",[_._v("优点\n"),v("ul",[v("li",[_._v("不限制请求类型")]),_._v(" "),v("li",[_._v("与同源的 AJAX 通信没有差别，代码完全一样")])])]),_._v(" "),v("li",[_._v("缺点\n"),v("ul",[v("li",[_._v("CORS 需要浏览器支持。目前，所有浏览器都支持该功能，IE 浏览器 ≥IE10。")]),_._v(" "),v("li",[_._v("CORS 需要服务器同时配置。")])])]),_._v(" "),v("li",[_._v("原理\n"),v("ul",[v("li",[_._v("浏览器将 CORS 请求分成两类：简单请求（simple request）和非简单请求（not-so-simple request)。")]),_._v(" "),v("li",[_._v("对于简单请求，浏览器直接发出 CORS 请求，自动在头信息之中，添加一个 "),v("code",[_._v("Origin")]),_._v(" 字段，用来说明请求的来源（协议 + 域名 + 端口），服务器根据这个值，做出处理。浏览器再根据服务器返回头信息处理：\n"),v("ul",[v("li",[v("code",[_._v("Access-Control-Allow-Origin")]),_._v(" 关键字段 没有这个值，浏览器就报错，说明服务制不支持本次跨域请求。有这个值（请求时 "),v("code",[_._v("Origin")]),_._v(" 或者 `*）。")]),_._v(" "),v("li",[v("code",[_._v("Access-Control-Allow-Credentials")]),_._v(" 可选 布尔值,是否允许浏览器发送 Cookie，默认不发送。发送请求时，需要设置 "),v("code",[_._v("withCredentials")]),_._v(" 为 "),v("code",[_._v("true")]),_._v("。")]),_._v(" "),v("li",[v("code",[_._v("Access-Control-Expose-Headers")]),_._v(" 可选 指定额外的 ResponseHeader 字段。")])])]),_._v(" "),v("li",[_._v('非简单请求的 CORS 请求，浏览器会增加一次 HTTP 查询请求（OPTIONS），称为"预检"请求（preflight）。OPTIONS 中几个关键字段：\n'),v("ul",[v("li",[v("code",[_._v("Origin")])]),_._v(" "),v("li",[v("code",[_._v("Access-Control-Request-Method")]),_._v(" 必须 原请求类型")]),_._v(" "),v("li",[v("code",[_._v("Access-Control-Request-Headers")]),_._v(" 可选 额外发送的头信息字段")])])]),_._v(" "),v("li",[_._v("服务器收到 OPTIONS 后，根据这几个关键字段，做出回应。浏览器再根据服务器返回头信息处理：\n"),v("ul",[v("li",[v("code",[_._v("Access-Control-Allow-Origin")]),_._v(" 关键字段 同上")]),_._v(" "),v("li",[v("code",[_._v("Access-Control-Allow-Methods")]),_._v(" 必须 服务器支持的所有跨域请求的方法")]),_._v(" "),v("li",[v("code",[_._v("Access-Control-Allow-Headers")]),_._v(" 如果请求时有 "),v("code",[_._v("Access-Control-Request-Headers")]),_._v(" 则时必须的，服务器支持的所有头信息字段")]),_._v(" "),v("li",[v("code",[_._v("Access-Control-Allow-Credentials")]),_._v(" 可选 同上")]),_._v(" "),v("li",[v("code",[_._v("Access-Control-Max-Age")]),_._v(" 可选 指定本次预检请求的有效期，单位为秒，在此期间不用再发 OPTIONS。")])])]),_._v(" "),v("li",[_._v("一旦服务器通过了 OPTIONS 请求，以后每次浏览器正常的 CORS 请求，就都跟简单请求一样进行处理。")])])])]),_._v(" "),v("h3",{attrs:{id:"_3-4-反向代理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-反向代理"}},[_._v("#")]),_._v(" 3.4 反向代理")]),_._v(" "),v("ul",[v("li",[_._v("优点：纯前端解决方案")]),_._v(" "),v("li",[_._v("原理：同源策略是浏览器的安全策略，不是 HTTP 协议的一部分。服务器端之间调用 HTTP 接口只是使用 HTTP 协议，也就不存在跨越问题。请求过程：浏览器向代理（同源）服务器发起请求，再由代理（同源）服务器请求外部服务器。")]),_._v(" "),v("li",[_._v("应用：\n"),v("ul",[v("li",[_._v("开发：设置 webpack devServer proxy（webpack 的 proxy 基于 "),v("code",[_._v("http-proxy-middleware")]),_._v("）")]),_._v(" "),v("li",[_._v("生产：nginx 服务器配置反向代理接口")])])])]),_._v(" "),v("hr"),_._v(" "),v("p",[_._v("注：")]),_._v(" "),v("p",[_._v("简单请求：只要同时满足以下两大条件，就属于简单请求")]),_._v(" "),v("ul",[v("li",[_._v("请求方法是以下三种方法之一：\n"),v("ul",[v("li",[_._v("HEAD")]),_._v(" "),v("li",[_._v("GET")]),_._v(" "),v("li",[_._v("POST")])])]),_._v(" "),v("li",[_._v("HTTP的头信息不超出以下几种字段：\n"),v("ul",[v("li",[_._v("Accept")]),_._v(" "),v("li",[_._v("Accept-Language")]),_._v(" "),v("li",[_._v("Content-Language")]),_._v(" "),v("li",[_._v("Last-Event-ID")]),_._v(" "),v("li",[_._v("Content-Type：只限于三个值 "),v("code",[_._v("application/x-www-form-urlencoded")]),_._v("、"),v("code",[_._v("multipart/form-data")]),_._v("、"),v("code",[_._v("text/plain")])])])])]),_._v(" "),v("p",[_._v("参考："),v("br"),_._v(" "),v("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html",target:"_blank",rel:"noopener noreferrer"}},[_._v("浏览器同源政策及其规避方法"),v("OutboundLink")],1),v("br"),_._v(" "),v("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2016/04/cors.html",target:"_blank",rel:"noopener noreferrer"}},[_._v("跨域资源共享 CORS 详解"),v("OutboundLink")],1),v("br"),_._v(" "),v("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/60019674",target:"_blank",rel:"noopener noreferrer"}},[_._v("CORS 服务器相关配置"),v("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=a.exports}}]);